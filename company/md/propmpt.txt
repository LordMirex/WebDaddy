i need your helop in being a professional system archetect because am trying to create  a systmme for my companty (software agency)

I'd be happy to help you design a system for your software agency! To create the most effective architecture for your needs, let me understand your requirements better:

Key questions:

What type of system are you building?
Project management system
Client relationship management (CRM)
Resource allocation and team management
Time tracking and billing
Complete agency management platform
Something else?
What are your main pain points you're trying to solve?
Scale considerations:
How many employees/team members?
How many concurrent projects typically?
Expected number of clients?
Integration needs:
Do you need to integrate with existing tools (Slack, GitHub, Jira, etc.)?
Payment processing?
Communication tools?
Technical preferences:
Do you have preferred technologies/frameworks?
Cloud hosting preferences (AWS, Azure, Google Cloud)?
Mobile app requirements?
Once I understand your specific needs, I can help you with:

System architecture design (microservices vs monolithic, etc.)
Technology stack recommendations
Database schema design
API design
Scalability planning
Security architecture
Deployment strategy
What's the primary problem you're trying to solve with this system?

Okay let me brif you on the once currently , what we are doing right now is build website templates various type and for every client that need thta template they message use, they either customize it or use it the way it is from tyhe template just personalixzze a few things, the problem with this is that it takes too long and now that we just made a affliate deal with a celebretity that will be bringing use new clients i need your help in fully understanding what we are dealing with because the celebrety is asking cfor 30k naira upfront but where i want improvement is the delivery to clients because the influcer said that he want affliate code which i have nothing like that, not even a portfoilio currently so there is a issue where i now need to code my portfolio and a converting way that the influcer can track his users and commissions and we get the site delevered to them.

i was thinking of some feautures like the portfolio having the websites all available, in a way that  i code one template, then host variouse version, buy the domain and everything so when the peoploe just come all i need is fill their name, email, referal code for bonus (afflaites code), then they are asked to deposit the amount and after successful deposit they receive a mail containing the websuite details like , the test user account details, admin details,  customer care whatsapp, tuturiual videos links and others and the deal making them not that they should be paying maintanace fee of 10k permonth for their website to be active.

and these are just what my brains are thinking i know you know more, because i need a great and converting system that doesnt lag and fail

Excellent! Now I understand your vision. You're essentially building a SaaS platform for template-based websites with affiliate tracking and automated delivery. This is a solid business model, and I can help you architect this properly.

Let me break down what you actually need:

Core System Requirements:
1. Public-Facing Portfolio/Storefront
Showcase all your website templates with live demos
Each template has its own demo URL
Pricing clearly displayed
Category filtering (e-commerce, portfolio, business, etc.)
2. Affiliate System
Unique referral codes for affiliates (celebrity and future affiliates)
Track clicks, conversions, and commissions
Affiliate dashboard to see their stats
Commission calculation (e.g., 20% per sale)
3. Customer Onboarding Flow
Customer selects template
Fills form: Name, Email, Phone, Business Name, Referral Code (optional)
Payment integration (Paystack or Flutterwave for Naira)
Instant automated delivery after payment
4. Automated Delivery System (This is KEY!)
Auto-provision subdomain or custom domain
Auto-create database instance for the client
Auto-send welcome email with:
Website URL
Admin login credentials
Customer support WhatsApp
Tutorial video links
Terms of service
5. Subscription Management
Track monthly maintenance fees (₦10k/month)
Auto-suspend websites after failed payment
Payment reminders via email/SMS
Reactivation upon payment
6. Admin Dashboard
View all customers and their websites
Manage templates
View revenue and affiliate commissions
Manually provision/suspend sites
Customer support ticketing
Recommended System Architecture:
Tech Stack Suggestion:
Frontend (Portfolio/Storefront):

Next.js or React for fast, SEO-friendly pages
TailwindCSS for styling
Backend:

Node.js with Express or NestJS
PostgreSQL database (reliable and scalable)
Payment:

Paystack (most popular in Nigeria) or Flutterwave
Hosting & Infrastructure:

Option 1: Use cPanel/WHM with WHMCS for automated provisioning
Option 2: Cloud-based (AWS/DigitalOcean) with custom provisioning scripts
Option 3: Use a multi-tenant architecture (all clients on one codebase, separate databases)
Email Service:

Brevo (formerly Sendinblue) or Mailgun for transactional emails
Domain Management:

Namecheap or Whogohost API for automated subdomain creation
Critical Questions Before We Proceed:
What technology are your templates built with? (WordPress, custom HTML/CSS/JS, React, Laravel, etc.)
Domain strategy: Will clients get subdomains (client.youragency.com) or can they bring their own domains?
Customization level: You mentioned clients can customize - do they customize before or after purchase?
Budget: What's your budget for initial development and monthly hosting?
Timeline: When does the celebrity campaign launch?
Your technical capacity: Do you have developers in-house, or will you outsource?
I can help you design the complete system architecture, database schema, user flows, and even create wireframes. Should I start creating a detailed technical specification document for you, or would you like me to prioritize a specific component first (like the affiliate system or the automated delivery)?

okay lets go slow, because i dont really undersatand alot of things here, forget about code first lets talk system and structure, the system is not automated right because i have to buy domain and host for every client, which is expensive but saves my as one  domain is banned it will affect all the other website which i was thinking of using subdomains like daniel.returns.online,   jj.returns.online, but know i know i rather spend than sub domaibs as the will be paying alot, and also so remove the automation, for now we are to act smart and create a system that i will buy at least 5 domains and host all of them ready, and when the user just fill that website form, the system should just check the domains that are still marked available by admin and show the users on the registration to choose among the 5 url of their choice, so not that the user dont even have a dashboard just the afflaite and the admins that have need for good dashboard because oimagine that i can hjust click suspend or set time line, or the system knows that all site should be subscribed

Ah, NOW we're talking! You're thinking smart - let's break this down in plain English, no tech jargon.

The Simple System Flow:
Your Pre-Work (Admin Side):
You buy 5 domains (e.g., luxebiz.com, smartstore.ng, etc.)
You install the template on each domain
You mark them as "Available" in your admin panel
They're ready and waiting for customers
What Happens When a Customer Comes:
Step 1: Customer Views Portfolio

They see your beautiful portfolio site
Click on a template they like (e.g., "E-commerce Template")
Click "Get This Website"
Step 2: Registration Form

Name: _______
Email: _______
Phone: _______
Business Name: _______
Referral Code: _______ (optional - for affiliate tracking)
Choose Your Website URL: (dropdown showing only the 5 available domains you prepared)
○ luxebiz.com
○ smartstore.ng
○ returns.online
○ etc.
Price: ₦XX,XXX (one-time) + ₦10,000/month maintenance
Step 3: Payment

Customer pays via Paystack
Money hits your account
Step 4: What Happens Automatically (The "Smart" Part)

System marks that chosen domain as "SOLD" (no longer shows to other customers)
System sends customer an email with:
Their website URL
Admin username & password
Your WhatsApp number
Video tutorials
Subscription start date
System records:
Customer paid today (Oct 15, 2025)
Next payment due: Nov 15, 2025
If referral code was used, system credits the affiliate
Step 5: Every Month

5 days before payment is due → System sends reminder email
If customer pays → Website stays active
If customer doesn't pay → System marks website as "SUSPENDED" (you manually turn it off or system can if you want)
The Dashboards You Need:
Customer Has NO Dashboard ✓
They just get their website
They manage it directly on their site
Smart! Keeps it simple
Affiliate Dashboard (Simple)
Shows the celebrity/affiliate:

Total clicks on their link
Total customers who used their code
Total commission earned
Payment history
Admin Dashboard (This is YOUR control center)
You see:

Available Domains: 5 domains, 2 sold, 3 available
All Customers: List of everyone who bought
Subscription Status: Who paid, who's pending, who's overdue
Quick Actions:
Mark domain as available/sold
Suspend a website
Process refund
See which affiliate brought which customer
Calculate commissions owed
The Real Questions:
How many pre-built domains can you afford to have ready? (You said 5, but is that per template or total?)
When a domain sells, how fast can you prepare a new one? (So you always have 5 ready)
Domain cost: What's your budget per domain + hosting? (This affects if you go with cheap domains or premium)
Template variety: How many different templates do you have? (E-commerce, portfolio, restaurant, etc.)
The ₦30k celebrity upfront - Is that a one-time fee or monthly? And what commission % did you agree on?
Payment structure: Is it ₦XXX upfront + ₦10k/month, or just ₦10k/month subscription?
Does this simplified flow make more sense? Should we map out the system visually so you can see exactly how everything connects?

now i your help addressing everything, i will buy 5 domains for maybe 2 templates and the template system should be in a very categoried manner, in a way that when i buy new domains i can map and say this domain belongs to this category/template. when i buy each of the domain i can say its for this specific website/template and if two domains available for that template they are still other informatioosn like the video links, you know what, the best is that the user really confirms if the email is theirs or correct because once they pay the only track they will have i to the website created for them, now am thinking that this is a really bad idea dont you think, what if theres somewhere they can go to see their subscription and websites they have with us like a professional type of shit beacuse i think ity will be cool if they have more control and power over their websites and can pay subscriptions for any lenght like 1 year, you understand, please i have been giving you information about the project for hours now really go through our conversaion for undersranding, and let me even break the ice, no matter want i want the website as fast as possible but i only know php and little python, and mysql and phpmyadmin and Cpanel hosting is what am using thats why i like php, i dont know if python can help me improve speed and performance matching beauty with perfromance and sustainability, even the paystack i dont know how to use it on php or anywhere, after we have discussed i will suggest that the payment is great too , and where mad automations comes in is when a user buys a website and have selected a domain so that domain should instantly mark active or inuse and not display anymore on website signin, the email should be automated in a way that when the payment for the website has been successfull the user receives the email of the website details something like that, and i am not too technical so i dont need all those stressfull tools, even now that clients are going to have dashboard i even have more great ideas like giving them 1 year free maintanance thats (-120k) when someone use their referal code to register, and also make all aspect the best like the afflaite and also admin, the affliate should be able to request withdraw at any time as far that the have balance and also they should be settings and even admin settings alot like the categories, listings, prices, afflaite/referral, email, domains, management, and alot .

for the question you asked before
1. i dont know yet but the system is that the admin can assign various ready domain to templates and user puchasing that domain will select if they are more that one availble, if just one the user have to pick that one.
2. For now its starting and we dont have alot of capital but once we starting earning we would be able to buy alot of domains for each template
3. Each domain is N3000 which hosting is N1000 so with charges everything will end up at 5k per website ready, but on our first sale we can get up to N200,000 for that website
4. We just have About 4 Top Website templates right now
5. The influcer took N30,000 for agreement, the main deal is 30% of commission for any deal that is done using his AFFcode. while for users with REFcode to refer their friend  gets 120k balance that can only be used for maintance credit, why the user buying the websites gets 30% off their purchase

Okay, I've read through EVERYTHING carefully. Now I understand the full picture! Let me address this properly because you're building something really solid here.

First - The Technical Reality (PHP vs Python)
GOOD NEWS: PHP is PERFECT for this project! Here's why:

You already know PHP ✓
cPanel hosting works great with PHP ✓
Paystack has excellent PHP libraries ✓
You can build this FAST with PHP ✓
Laravel (PHP framework) or even plain PHP will work beautifully
Python would actually SLOW you down because:

You'd need to learn deployment (harder than cPanel)
More expensive hosting
You know PHP already - use what you know!
My recommendation: Use PHP with Laravel framework - it has everything built-in (authentication, email sending, payment integration, beautiful admin panels). But if Laravel feels too much, even plain PHP works.

The CORRECTED System Design:
Customer Dashboard - YES, They Need It!
You're RIGHT to give customers a dashboard. Here's why:

They can see their subscription status
They can pay renewals themselves (less work for you!)
They can manage multiple websites if they buy more
It looks PROFESSIONAL
They can see their referral code and track who they referred
Customer Dashboard Shows:

My Websites (list of all sites they own)
Subscription Status (Active/Expires on Nov 15)
Pay Maintenance button
My Referral Code (to refer others and get 120k credit)
Maintenance Credit Balance (from referrals)
Payment History
The Complete System Structure:
1. ADMIN PANEL (Your Control Center)
Categories/Templates Management:

Template Name: "E-commerce Store"
Description: ...
Demo URL: demo-ecommerce.yoursite.com
Price: ₦200,000
Tutorial Video Links (you can add multiple)
Status: Active/Inactive
Domains Management:

Domain: luxebiz.com
Template: E-commerce Store
Status: Available / In Use / Suspended
Customer: (if in use, shows customer name)
Activated Date: Oct 15, 2025
Next Payment: Nov 15, 2025
Actions: [Suspend] [Mark Available] [Edit]
```

**Settings Section:**
- **Pricing Settings:**
  - Affiliate commission: 30%
  - Referral bonus credit: ₦120,000
  - Referral discount: 30%
  - Monthly maintenance: ₦10,000

- **Email Settings:**
  - Welcome email template
  - Payment reminder template
  - Suspension notice template
  - WhatsApp number for support

- **Payment Settings:**
  - Paystack API keys
  - Bank account for withdrawals

**Customers Management:**
- List all customers
- See their websites
- See subscription status
- Manually suspend/activate
- View payment history

**Affiliates Management:**
- List all affiliates
- Commission earned
- Pending withdrawals
- Approve/Reject withdrawal requests
- Payment history

**Dashboard Overview:**
- Total Revenue
- Active Subscriptions
- Pending Payments
- Available Domains (by template)
- Recent Orders

---

### **2. AFFILIATE DASHBOARD**

Shows:
- Unique Affiliate Code: `CEL-JOHN-2025`
- Unique Referral Link: `yoursite.com/register?aff=CEL-JOHN-2025`
- Total Clicks on link
- Total Sales (customers who used the code)
- Commission Earned: ₦450,000
- Pending Withdrawal: ₦450,000
- Paid Out: ₦0
- [Request Withdrawal] button
- Payment History

---

### **3. CUSTOMER PORTAL**

**After Payment, Customer Gets:**
- Email with website details + login to customer portal
- They verify email (click link in email)

**Customer Portal Shows:**

**My Websites Tab:**
```
Website: luxebiz.com
Template: E-commerce Store
Status: Active (Expires: Nov 15, 2025)
Admin URL: luxebiz.com/admin
Username: admin_luxebiz
Actions: [Pay Maintenance] [View Details] [Get Support]
```

**Subscription Tab:**
- Current Plan: Monthly (₦10,000/month)
- Next Payment: Nov 15, 2025
- Payment Options:
  - Pay 1 month (₦10,000)
  - Pay 3 months (₦30,000)
  - Pay 6 months (₦60,000)
  - Pay 1 year (₦120,000)
- [Pay Now] button

**Referral Tab:**
- Your Referral Code: `REF-DANIEL-892`
- Your Referral Link: `yoursite.com/register?ref=REF-DANIEL-892`
- Referral Credit Balance: ₦0
- People You Referred: 0
- How It Works: "When someone buys a website using your code, you get ₦120,000 credit for maintenance payments!"

**Payment History Tab:**
- Shows all payments made

---

### **4. PUBLIC WEBSITE (Portfolio/Storefront)**

**Homepage:**
- Hero section
- "Our Website Templates" section
- Shows all active templates with:
  - Screenshot/preview
  - Template name
  - Features
  - Price
  - [View Demo] [Get Started] buttons

**Template Page:**
- Full template details
- Live demo in iframe
- Features list
- Pricing
- Tutorial videos preview
- [Get This Website] button

**Registration/Order Page:**
```
Step 1: Your Information
- Full Name: _____
- Email: _____
- Phone: _____
- Business Name: _____

Step 2: Select Your Domain
(Shows only available domains for this template)
○ luxebiz.com
○ smartstore.ng
(If no domains available: "Sorry, all domains for this template are currently sold. We're preparing more!")

Step 3: Discount Codes
- Have an affiliate code? _____ (30% commission to affiliate)
- Have a referral code? _____ (30% off for you, ₦120k credit for referrer)

Final Price:
Original: ₦200,000
Discount: -₦60,000 (if referral code used)
Total: ₦140,000

[Proceed to Payment]
After Payment:

Redirect to "Success" page
"Check your email for website details!"
"Create your customer account" (they set password)
Domain instantly marked as "In Use"
The Automations:
Automation 1: After Successful Payment
Mark domain as "In Use" in database
Create customer account
Send email with:
Website URL
Admin credentials
Tutorial videos
WhatsApp support
Link to customer portal
If affiliate code used → Add commission to affiliate balance
If referral code used → Add ₦120k credit to referrer + give 30% discount to buyer
Set subscription start date (today)
Set next payment date (1 month from today)
Automation 2: Payment Reminders
7 days before expiry → Email reminder
3 days before expiry → Email reminder
On expiry day → Email: "Payment overdue"
3 days after expiry → Suspend website + email notification
Automation 3: Subscription Renewal
Customer pays from their portal
Website reactivated automatically
Next payment date updated
Email confirmation sent
Automation 4: Referral System
When someone uses referral code
Referrer gets ₦120,000 credit (can only use for maintenance)
Buyer gets 30% off
Both parties get email notification
Database Structure (Simple Overview):
Users Table:

id, name, email, phone, password, role (admin/customer/affiliate), created_at
Templates Table:

id, name, description, price, demo_url, video_links (JSON), status
Domains Table:

id, template_id, domain_name, status (available/in_use/suspended), customer_id, activated_at, expires_at
Orders Table:

id, customer_id, domain_id, amount_paid, affiliate_code, referral_code, payment_ref, status, created_at
Subscriptions Table:

id, customer_id, domain_id, start_date, end_date, status (active/expired/suspended)
Payments Table:

id, customer_id, domain_id, amount, payment_type (initial/maintenance), payment_ref, created_at
Affiliates Table:

id, user_id, affiliate_code, total_sales, commission_earned, commission_paid, commission_pending
Referrals Table:

id, referrer_id, referee_id, credit_amount, credit_used, credit_balance
Withdrawal_Requests Table:

id, affiliate_id, amount, status (pending/approved/rejected), created_at
Paystack Integration in PHP (It's Easy!):
php
// Super simple Paystack integration
// You'll use their PHP library
// When customer clicks "Pay Now":

1. Send payment request to Paystack
2. Customer pays on Paystack page
3. Paystack redirects back to your site
4. You verify payment
5. Activate everything automatically
I can give you the exact code for this - it's literally 20 lines of PHP!

My Recommendation - Build Order:
Phase 1 (URGENT - Before celebrity campaign):

Public portfolio website ✓
Registration/order system ✓
Paystack integration ✓
Basic admin panel (domains, customers) ✓
Automated email after payment ✓
Affiliate tracking ✓
Phase 2 (After first sales):

Customer portal ✓
Subscription management ✓
Referral system ✓
Payment reminders ✓
Phase 3 (Scale up):

Advanced analytics ✓
Automated suspension ✓
Affiliate withdrawal system ✓
Cost Breakdown:
Per Website:

Domain: ₦3,000
Hosting: ₦1,000
Setup: ₦1,000
Total Cost: ₦5,000
Revenue:

Sale Price: ₦200,000
Affiliate Commission (30%): -₦60,000 (if affiliate code used)
OR Referral Discount (30%): -₦60,000 (if referral code used)
Net from First Sale: ₦140,000
Monthly Maintenance: ₦10,000/month
Your Profit Per Website:

First sale: ₦140,000 - ₦5,000 = ₦135,000 profit
Each month after: ₦10,000 profit (pure profit after year 1)
Should I now create the actual system for you? I can build:

The database structure
The complete admin panel
The public website with registration
Paystack integration code
All the automation
What do you want me to start with first?


i will use plain php and i will also need to build fast and make sire the websuite loads fast so nake sure you help me with repos or things to assist in building, now generate everything PRD, and others

Complete PRD & Technical Documentation
Website Template Sales Platform with Affiliate System
📋 TABLE OF CONTENTS
Product Requirements Document (PRD)
Database Schema
System Architecture
User Flow Diagrams
API Endpoints
File Structure
Development Phases
Code Standards & Best Practices
1. PRODUCT REQUIREMENTS DOCUMENT (PRD)
1.1 Executive Summary
A web platform that sells pre-built website templates with automated delivery, subscription management, and affiliate tracking system. Built for speed using plain PHP, MySQL, and cPanel hosting.

1.2 Business Goals
Sell website templates at ₦200,000 each
Charge ₦10,000/month maintenance fee
Support 30% affiliate commission program
Support 30% referral discount + ₦120k credit system
Minimize manual intervention in sales and delivery process
1.3 Target Users
Customers: Nigerian small business owners needing websites
Affiliates: Influencers/marketers earning 30% commission
Admin: Your team managing the platform
1.4 Core Features
Public Website (Portfolio/Storefront)
Homepage with template showcase
Template detail pages with live demos
Registration/checkout system
Affiliate link tracking
Referral code system
Paystack payment integration
Customer Portal
View owned websites
Subscription status and expiry dates
Pay maintenance fees (1, 3, 6, 12 months)
Referral code and tracking
Maintenance credit balance
Payment history
Email verification system
Affiliate Dashboard
Unique affiliate code and tracking link
Real-time sales tracking
Commission balance (earned, pending, paid)
Withdrawal request system
Click and conversion analytics
Payment history
Admin Panel
Dashboard: Revenue, active subs, pending payments
Templates Management: Add/edit templates, pricing, videos
Domains Management: Assign domains to templates, track status
Customers Management: View all customers, subscriptions, manual actions
Affiliates Management: View commissions, approve withdrawals
Orders Management: All transactions and orders
Settings: Pricing, commissions, email templates, Paystack keys
Automation Features
Auto-mark domain as "In Use" after payment
Auto-send welcome email with website details
Auto-calculate and track affiliate commissions
Auto-apply referral discounts and credits
Auto-send payment reminders (7 days, 3 days before expiry)
Auto-track subscription expiry dates
Email verification for new accounts
1.5 Revenue Model
Initial Sale:

Base Price: ₦200,000
With Affiliate Code: ₦200,000 (customer pays full, affiliate gets 30% = ₦60,000)
With Referral Code: ₦140,000 (30% discount), referrer gets ₦120,000 credit
Cost: ₦5,000 (domain + hosting)
Net Profit: ₦135,000 - ₦195,000
Monthly Maintenance:

Price: ₦10,000/month
Pure profit (after initial year)
Affiliate Payouts:

30% of each sale using their code
Paid via bank transfer after withdrawal request
Referral Credits:

₦120,000 credit (maintenance only)
Cannot be withdrawn, only used for subscription payments
1.6 User Roles & Permissions
Feature	Customer	Affiliate	Admin
View Templates	✓	✓	✓
Purchase Website	✓	✓	✓
Customer Portal	✓	-	✓
Affiliate Dashboard	-	✓	✓
Request Withdrawal	-	✓	-
Admin Panel	-	-	✓
Manage Domains	-	-	✓
Approve Withdrawals	-	-	✓
2. DATABASE SCHEMA
2.1 Database Design (MySQL)
sql
-- ============================================
-- USERS TABLE
-- ============================================
CREATE TABLE users (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    phone VARCHAR(20) NOT NULL,
    password VARCHAR(255) NOT NULL,
    role ENUM('admin', 'customer', 'affiliate') DEFAULT 'customer',
    email_verified TINYINT(1) DEFAULT 0,
    email_verification_token VARCHAR(64),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_email (email),
    INDEX idx_role (role),
    INDEX idx_verification_token (email_verification_token)
);

-- ============================================
-- TEMPLATES TABLE
-- ============================================
CREATE TABLE templates (
    id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    slug VARCHAR(255) UNIQUE NOT NULL,
    description TEXT,
    features TEXT, -- JSON format
    price DECIMAL(10, 2) NOT NULL,
    demo_url VARCHAR(255),
    thumbnail VARCHAR(255),
    video_links TEXT, -- JSON format: ["url1", "url2"]
    status ENUM('active', 'inactive') DEFAULT 'active',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_slug (slug),
    INDEX idx_status (status)
);

-- ============================================
-- DOMAINS TABLE
-- ============================================
CREATE TABLE domains (
    id INT PRIMARY KEY AUTO_INCREMENT,
    template_id INT NOT NULL,
    domain_name VARCHAR(255) UNIQUE NOT NULL,
    status ENUM('available', 'in_use', 'suspended') DEFAULT 'available',
    customer_id INT,
    admin_username VARCHAR(100),
    admin_password VARCHAR(255),
    activated_at TIMESTAMP NULL,
    expires_at TIMESTAMP NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (template_id) REFERENCES templates(id) ON DELETE CASCADE,
    FOREIGN KEY (customer_id) REFERENCES users(id) ON DELETE SET NULL,
    INDEX idx_template (template_id),
    INDEX idx_status (status),
    INDEX idx_customer (customer_id),
    INDEX idx_expires (expires_at)
);

-- ============================================
-- ORDERS TABLE
-- ============================================
CREATE TABLE orders (
    id INT PRIMARY KEY AUTO_INCREMENT,
    order_number VARCHAR(50) UNIQUE NOT NULL,
    customer_id INT NOT NULL,
    template_id INT NOT NULL,
    domain_id INT,
    business_name VARCHAR(255),
    amount DECIMAL(10, 2) NOT NULL,
    discount_amount DECIMAL(10, 2) DEFAULT 0,
    final_amount DECIMAL(10, 2) NOT NULL,
    affiliate_code VARCHAR(50),
    referral_code VARCHAR(50),
    payment_reference VARCHAR(255),
    payment_status ENUM('pending', 'completed', 'failed') DEFAULT 'pending',
    status ENUM('pending', 'processing', 'completed', 'cancelled') DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (customer_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (template_id) REFERENCES templates(id) ON DELETE CASCADE,
    FOREIGN KEY (domain_id) REFERENCES domains(id) ON DELETE SET NULL,
    INDEX idx_order_number (order_number),
    INDEX idx_customer (customer_id),
    INDEX idx_payment_status (payment_status),
    INDEX idx_affiliate_code (affiliate_code),
    INDEX idx_referral_code (referral_code)
);

-- ============================================
-- SUBSCRIPTIONS TABLE
-- ============================================
CREATE TABLE subscriptions (
    id INT PRIMARY KEY AUTO_INCREMENT,
    customer_id INT NOT NULL,
    domain_id INT NOT NULL,
    start_date DATE NOT NULL,
    end_date DATE NOT NULL,
    status ENUM('active', 'expired', 'suspended', 'cancelled') DEFAULT 'active',
    auto_renew TINYINT(1) DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (customer_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (domain_id) REFERENCES domains(id) ON DELETE CASCADE,
    INDEX idx_customer (customer_id),
    INDEX idx_domain (domain_id),
    INDEX idx_status (status),
    INDEX idx_end_date (end_date)
);

-- ============================================
-- PAYMENTS TABLE
-- ============================================
CREATE TABLE payments (
    id INT PRIMARY KEY AUTO_INCREMENT,
    customer_id INT NOT NULL,
    domain_id INT,
    order_id INT,
    subscription_id INT,
    amount DECIMAL(10, 2) NOT NULL,
    payment_type ENUM('initial_purchase', 'maintenance', 'renewal') NOT NULL,
    payment_method VARCHAR(50) DEFAULT 'paystack',
    payment_reference VARCHAR(255) UNIQUE NOT NULL,
    status ENUM('pending', 'successful', 'failed') DEFAULT 'pending',
    months_paid INT DEFAULT 1,
    credit_used DECIMAL(10, 2) DEFAULT 0,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (customer_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (domain_id) REFERENCES domains(id) ON DELETE SET NULL,
    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE SET NULL,
    FOREIGN KEY (subscription_id) REFERENCES subscriptions(id) ON DELETE SET NULL,
    INDEX idx_customer (customer_id),
    INDEX idx_reference (payment_reference),
    INDEX idx_status (status),
    INDEX idx_type (payment_type)
);

-- ============================================
-- AFFILIATES TABLE
-- ============================================
CREATE TABLE affiliates (
    id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT UNIQUE NOT NULL,
    affiliate_code VARCHAR(50) UNIQUE NOT NULL,
    commission_rate DECIMAL(5, 2) DEFAULT 30.00,
    total_clicks INT DEFAULT 0,
    total_sales INT DEFAULT 0,
    total_revenue DECIMAL(10, 2) DEFAULT 0,
    commission_earned DECIMAL(10, 2) DEFAULT 0,
    commission_paid DECIMAL(10, 2) DEFAULT 0,
    commission_pending DECIMAL(10, 2) DEFAULT 0,
    status ENUM('active', 'inactive', 'suspended') DEFAULT 'active',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    INDEX idx_affiliate_code (affiliate_code),
    INDEX idx_status (status)
);

-- ============================================
-- AFFILIATE CLICKS TABLE
-- ============================================
CREATE TABLE affiliate_clicks (
    id INT PRIMARY KEY AUTO_INCREMENT,
    affiliate_id INT NOT NULL,
    ip_address VARCHAR(45),
    user_agent TEXT,
    referrer_url VARCHAR(255),
    clicked_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (affiliate_id) REFERENCES affiliates(id) ON DELETE CASCADE,
    INDEX idx_affiliate (affiliate_id),
    INDEX idx_clicked_at (clicked_at)
);

-- ============================================
-- REFERRALS TABLE
-- ============================================
CREATE TABLE referrals (
    id INT PRIMARY KEY AUTO_INCREMENT,
    referrer_id INT NOT NULL,
    referral_code VARCHAR(50) UNIQUE NOT NULL,
    referee_id INT,
    order_id INT,
    credit_amount DECIMAL(10, 2) DEFAULT 120000.00,
    credit_used DECIMAL(10, 2) DEFAULT 0,
    credit_balance DECIMAL(10, 2) DEFAULT 120000.00,
    status ENUM('pending', 'completed', 'expired') DEFAULT 'pending',
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (referrer_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (referee_id) REFERENCES users(id) ON DELETE SET NULL,
    FOREIGN KEY (order_id) REFERENCES orders(id) ON DELETE SET NULL,
    INDEX idx_referrer (referrer_id),
    INDEX idx_referral_code (referral_code),
    INDEX idx_status (status)
);

-- ============================================
-- WITHDRAWAL REQUESTS TABLE
-- ============================================
CREATE TABLE withdrawal_requests (
    id INT PRIMARY KEY AUTO_INCREMENT,
    affiliate_id INT NOT NULL,
    amount DECIMAL(10, 2) NOT NULL,
    bank_name VARCHAR(255) NOT NULL,
    account_number VARCHAR(20) NOT NULL,
    account_name VARCHAR(255) NOT NULL,
    status ENUM('pending', 'approved', 'rejected', 'paid') DEFAULT 'pending',
    admin_notes TEXT,
    requested_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    processed_at TIMESTAMP NULL,
    processed_by INT,
    FOREIGN KEY (affiliate_id) REFERENCES affiliates(id) ON DELETE CASCADE,
    FOREIGN KEY (processed_by) REFERENCES users(id) ON DELETE SET NULL,
    INDEX idx_affiliate (affiliate_id),
    INDEX idx_status (status),
    INDEX idx_requested_at (requested_at)
);

-- ============================================
-- SETTINGS TABLE
-- ============================================
CREATE TABLE settings (
    id INT PRIMARY KEY AUTO_INCREMENT,
    setting_key VARCHAR(100) UNIQUE NOT NULL,
    setting_value TEXT,
    setting_type VARCHAR(50) DEFAULT 'text',
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    INDEX idx_key (setting_key)
);

-- ============================================
-- EMAIL LOGS TABLE
-- ============================================
CREATE TABLE email_logs (
    id INT PRIMARY KEY AUTO_INCREMENT,
    recipient_email VARCHAR(255) NOT NULL,
    subject VARCHAR(255) NOT NULL,
    email_type VARCHAR(50),
    status ENUM('sent', 'failed') DEFAULT 'sent',
    error_message TEXT,
    sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    INDEX idx_recipient (recipient_email),
    INDEX idx_type (email_type),
    INDEX idx_sent_at (sent_at)
);

-- ============================================
-- ACTIVITY LOGS TABLE
-- ============================================
CREATE TABLE activity_logs (
    id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT,
    action VARCHAR(100) NOT NULL,
    description TEXT,
    ip_address VARCHAR(45),
    user_agent TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE SET NULL,
    INDEX idx_user (user_id),
    INDEX idx_action (action),
    INDEX idx_created_at (created_at)
);

-- ============================================
-- INSERT DEFAULT SETTINGS
-- ============================================
INSERT INTO settings (setting_key, setting_value, setting_type) VALUES
('site_name', 'Your Agency Name', 'text'),
('site_email', 'info@youragency.com', 'text'),
('support_whatsapp', '+2348012345678', 'text'),
('maintenance_fee', '10000', 'number'),
('affiliate_commission_rate', '30', 'number'),
('referral_discount_rate', '30', 'number'),
('referral_credit_amount', '120000', 'number'),
('paystack_public_key', '', 'text'),
('paystack_secret_key', '', 'text'),
('welcome_email_template', '', 'textarea'),
('reminder_email_template', '', 'textarea'),
('suspension_email_template', '', 'textarea');

-- ============================================
-- CREATE DEFAULT ADMIN USER
-- ============================================
-- Password: admin123 (hashed)
INSERT INTO users (name, email, phone, password, role, email_verified) VALUES
('Admin', 'admin@youragency.com', '08012345678', '$2y$10$92IXUNpkjO0rOQ5byMi.Ye4oKoEa3Ro9llC/.og/at2.uheWG/igi', 'admin', 1);
```

---

## 3. SYSTEM ARCHITECTURE

### **3.1 Technology Stack**

**Frontend:**
- HTML5
- CSS3 (with Tailwind CSS via CDN for fast development)
- JavaScript (Vanilla JS)
- jQuery (minimal use, only where needed)

**Backend:**
- PHP 7.4+ (Plain PHP, no framework)
- MySQL 5.7+
- PHPMailer for emails
- Paystack PHP Library

**Hosting:**
- cPanel/WHM
- Shared or VPS hosting
- SSL Certificate (Let's Encrypt)

**External Services:**
- Paystack (Payment Processing)
- SMTP Server (Email delivery)

### **3.2 Performance Optimization**

**Speed Optimizations:**
1. **Database:**
   - Proper indexing on all foreign keys
   - Query optimization (avoid SELECT *)
   - Connection pooling
   - Prepared statements (prevent SQL injection + faster)

2. **PHP:**
   - OPcache enabled
   - Session management optimized
   - Minimal includes per page
   - Output buffering

3. **Frontend:**
   - Minified CSS/JS
   - Image optimization (WebP format)
   - Lazy loading for images
   - CDN for libraries (Tailwind, jQuery)
   - Browser caching headers

4. **Caching Strategy:**
   - Static pages cached
   - Database query results cached (for templates list)
   - Session-based user data caching

### **3.3 Security Measures**

1. **Input Validation:**
   - All inputs sanitized
   - Prepared statements for SQL
   - XSS protection
   - CSRF tokens on forms

2. **Authentication:**
   - Password hashing (bcrypt)
   - Session management
   - Email verification
   - Rate limiting on login

3. **Payment Security:**
   - Paystack handles card details
   - Webhook signature verification
   - Transaction verification before activation

4. **Data Protection:**
   - HTTPS only
   - Secure password storage
   - API keys in environment variables
   - Regular backups

---

## 4. USER FLOW DIAGRAMS

### **4.1 Customer Purchase Flow**
```
START
  ↓
[Browse Templates] → [Select Template] → [View Demo]
  ↓
[Click "Get This Website"]
  ↓
[Registration Form]
  - Name, Email, Phone, Business Name
  - Select Available Domain
  - Enter Affiliate/Referral Code (optional)
  ↓
[Price Calculation]
  - Base Price: ₦200,000
  - IF referral code → Discount 30% = ₦140,000
  - IF affiliate code → No discount, full price
  ↓
[Redirect to Paystack]
  ↓
[Customer Pays]
  ↓
[Paystack Webhook] → [Verify Payment]
  ↓
[AUTOMATION TRIGGERS]
  - Mark domain as "In Use"
  - Create customer account
  - Send welcome email with:
    * Website URL
    * Admin credentials
    * Tutorial videos
    * Support WhatsApp
    * Customer portal link
  - IF affiliate code → Add commission to affiliate
  - IF referral code → Add ₦120k credit to referrer
  - Create subscription record
  - Set expiry date (1 month from today)
  ↓
[Success Page] → "Check your email!"
  ↓
[Customer Portal] → Customer manages subscription
  ↓
END
```

### **4.2 Subscription Renewal Flow**
```
[Customer Portal] → [My Websites] → [Website Card]
  ↓
[View Subscription Status]
  - Active until: Nov 15, 2025
  - Days remaining: 15 days
  ↓
[Click "Pay Maintenance"]
  ↓
[Select Payment Duration]
  ○ 1 Month - ₦10,000
  ○ 3 Months - ₦30,000
  ○ 6 Months - ₦60,000
  ○ 1 Year - ₦120,000
  ↓
[Check Referral Credit Balance]
  - Balance: ₦120,000
  - Option: Use credit or pay full
  ↓
IF using credit:
  - Deduct from credit balance
  - No payment required
  - Extend subscription immediately
ELSE:
  - Redirect to Paystack
  - Customer pays
  - Webhook verifies
  - Extend subscription
  ↓
[Email Confirmation] → Subscription extended
  ↓
END
```

### **4.3 Affiliate Withdrawal Flow**
```
[Affiliate Dashboard] → [View Commission Balance]
  - Earned: ₦450,000
  - Paid: ₦0
  - Pending: ₦450,000 ;
  ↓
[Click "Request Withdrawal"]
  ↓
[Withdrawal Form]
  - Amount: _____ (max: ₦450,000)
  - Bank Name: _____
  - Account Number: _____
  - Account Name: _____
  ↓
[Submit Request]
  ↓
[Status: Pending Review]
  ↓
[ADMIN RECEIVES NOTIFICATION]
  ↓
[Admin Reviews Request]
  → [Approve] OR [Reject]
  ↓
IF Approved:
  - Admin marks as "Paid"
  - System updates balances
  - Email sent to affiliate
  - Admin manually transfers money
  ↓
[Affiliate Receives Payment Confirmation]
  ↓
END
```

### **4.4 Referral System Flow**
```
[Customer A] → [Customer Portal] → [Referral Tab]
  ↓
[Copy Referral Code: REF-DANIEL-892]
  OR
[Copy Referral Link: yoursite.com/register?ref=REF-DANIEL-892]
  ↓
[Share with Friend (Customer B)]
  ↓
[Customer B] → Clicks link → [Registration Page]
  - Referral code auto-filled
  ↓
[Customer B completes purchase]
  - Gets 30% discount (₦60,000 off)
  - Pays ₦140,000 instead of ₦200,000
  ↓
[AUTOMATION TRIGGERS]
  - Customer A gets ₦120,000 credit added
  - Email sent to Customer A: "Your friend bought! ₦120k credit added"
  - Email sent to Customer B: "Welcome! You saved ₦60k"
  ↓
[Customer A] → Can use ₦120k credit for maintenance payments
  ↓
END
```

---

## 5. API ENDPOINTS & FUNCTIONS

### **5.1 Public Endpoints**
```
GET  /                          - Homepage
GET  /templates                 - All templates listing
GET  /template/{slug}           - Single template details
GET  /register                  - Registration/order form
POST /register                  - Process order (create pending order)
GET  /payment/callback          - Paystack redirect after payment
POST /payment/webhook           - Paystack webhook for verification
GET  /verify-email/{token}      - Email verification link
GET  /login                     - Login page
POST /login                     - Process login
GET  /logout                    - Logout

# Affiliate tracking
GET  /register?aff={code}       - Track affiliate click
GET  /register?ref={code}       - Apply referral code
```

### **5.2 Customer Portal Endpoints**
```
GET  /customer/dashboard        - Dashboard overview
GET  /customer/websites         - My websites list
GET  /customer/website/{id}     - Single website details
POST /customer/pay-maintenance  - Pay maintenance fee
GET  /customer/referral         - Referral code and stats
GET  /customer/payments         - Payment history
POST /customer/update-profile   - Update profile info
```

### **5.3 Affiliate Dashboard Endpoints**
```
GET  /affiliate/dashboard       - Affiliate dashboard
GET  /affiliate/stats           - Sales and commission stats
GET  /affiliate/withdrawals     - Withdrawal history
POST /affiliate/request-withdrawal - Submit withdrawal request
```

### **5.4 Admin Panel Endpoints**
```
# Dashboard
GET  /admin/dashboard           - Admin overview

# Templates
GET  /admin/templates           - List all templates
GET  /admin/template/create     - Create template form
POST /admin/template/create     - Save new template
GET  /admin/template/edit/{id}  - Edit template form
POST /admin/template/edit/{id}  - Update template
POST /admin/template/delete/{id} - Delete template in

# Domains
GET  /admin/domains             - List all domains
GET  /admin/domain/create       - Add domain form
POST /admin/domain/create       - Save new domain
GET  /admin/domain/edit/{id}    - Edit domain
POST /admin/domain/edit/{id}    - Update domain
POST /admin/domain/suspend/{id} - Suspend domain
POST /admin/domain/activate/{id} - Activate domain

# Customers
GET  /admin/customers           - List all customers
GET  /admin/customer/{id}       - Customer details
POST /admin/customer/suspend/{id} - Suspend customer

# Orders
GET  /admin/orders              - All orders
GET  /admin/order/{id}          - Order details

# Affiliates
GET  /admin/affiliates          - All affiliates
GET  /admin/affiliate/create    - Create affiliate
POST /admin/affiliate/create    - Save affiliate
GET  /admin/affiliate/{id}      - Affiliate details
GET  /admin/withdrawals         - Withdrawal requests
POST /admin/withdrawal/approve/{id} - Approve withdrawal
POST /admin/withdrawal/reject/{id}  - Reject withdrawal

# Settings
GET  /admin/settings            - Settings page
POST /admin/settings/update     - Update settings
```

---

## 6. FILE STRUCTURE
```
project-root/
│
├── config/
│   ├── database.php           # Database connection
│   ├── config.php             # General configuration
│   └── paystack.php           # Paystack configuration
│
├── includes/
│   ├── functions.php          # Helper functions
│   ├── auth.php               # Authentication functions
│   ├── email.php              # Email functions
│   └── validation.php         # Form validation
│
├── classes/
│   ├── Database.php           # Database class
│   ├── User.php               # User management
│   ├── Template.php           # Template management
│   ├── Domain.php             # Domain management
│   ├── Order.php              # Order processing
│   ├── Payment.php            # Payment handling
│   ├── Subscription.php       # Subscription management
│   ├── Affiliate.php          # Affiliate system
│   ├── Referral.php           # Referral system
│   └── Mailer.php             # Email sending
│
├── public/
│   ├── index.php              # Homepage
│   ├── templates.php          # Templates listing
│   ├── template.php           # Single template
│   ├── register.php           # Registration/order
│   ├── login.php              # Login page
│   ├── logout.php             # Logout
│   ├── verify-email.php       # Email verification
│   │
│   ├── payment/
│   │   ├── callback.php       # Paystack callback
│   │   └── webhook.php        # Paystack webhook
│   │
│   ├── customer/
│   │   ├── dashboard.php      # Customer dashboard
│   │   ├── websites.php       # My websites
│   │   ├── website.php        # Single website
│   │   ├── pay-maintenance.php # Pay maintenance
│   │   ├── referral.php       # Referral system
│   │   └── payments.php       # Payment history
│   │
│   ├── affiliate/
│   │   ├── dashboard.php      # Affiliate dashboard
│   │   ├── stats.php          # Statistics
│   │   ├── withdrawals.php    # Withdrawals
│   │   └── request-withdrawal.php # Request form
│   │
│   └── admin/
│       ├── dashboard.php      # Admin dashboard
│       ├── templates/         # Template management
│       ├── domains/           # Domain management
│       ├── customers/         # Customer management
│       ├── orders/            # Order management
│       ├── affiliates/        # Affiliate management
│       ├── withdrawals/       # Withdrawal management
│       └── settings/          # Settings
│
├── assets/
│   ├── css/
│   │   ├── style.css          # Main stylesheet
│   │   └── admin.css          # Admin styles
│   ├── js/
│   │   ├── main.js            # Main JavaScript
│   │   └── admin.js           # Admin JavaScript
│   └── images/
│       ├── templates/         # Template screenshots
│       └── logos/             # Logos
│
├── templates/
│   ├── email/
│   │   ├── welcome.php        # Welcome email template
│   │   ├── reminder.php       # Payment reminder
│   │   ├── suspension.php     # Suspension notice
│   │   └── verification.php   # Email verification
│   │
│   ├── partials/
│   │   ├── header.php         # Site header
│   │   ├── footer.php         # Site footer
│   │   ├── navbar.php         # Navigation
│   │   └── sidebar.php        # Admin sidebar
│   │
│   └── layouts/
│       ├── main.php           # Main layout
│       ├── admin.php          # Admin layout
│       └── customer.php       # Customer portal layout
│
├── cron/
│   ├── send-reminders.php     # Daily cron: payment reminders
│   ├── check-expiry.php       # Daily cron: check subscriptions
│   └── suspend-expired.php    # Daily cron: suspend expired sites
│
├── vendor/                    # Composer dependencies (if using)
│   └── paystack/              # Paystack PHP library
│
├── .env                       # Environment variables
├── .htaccess                  # Apache configuration
├── composer.json              # Composer dependencies (optional)
└── README.md                  # Project documentation
7. DEVELOPMENT PHASES
PHASE 1: Foundation & Core (Week 1-2) - PRIORITY
Goal: Get basic system working for celebrity campaign

✅ Tasks:

Database setup (all tables)
Configuration files (database, Paystack)
Basic authentication system
Public homepage with template showcase
Registration/order form
Paystack payment integration
Payment webhook handling
Automated email after purchase
Basic admin panel (view orders, domains)
Affiliate tracking (click tracking + commission calculation)
Deliverables:

Customer can browse templates
Customer can register and pay
Payment triggers email with website details
Domain marked as "In Use"
Affiliate gets commission tracked
Admin can see all orders
PHASE 2: Customer Portal & Subscriptions (Week 3)
✅ Tasks:

Customer dashboard
My websites page
Subscription management
Maintenance payment system
Email verification
Payment history
Referral system (code generation + credit tracking)
Credit balance and usage
Deliverables:

Customers can login and view their websites
Customers can pay maintenance fees
Customers can use referral credits
Customers can refer friends
PHASE 3: Affiliate Dashboard (Week 4)
✅


you didnt send complete and also i need content, besides make sure that aff and ref actually works, theres nothing like register? it should just be the keys and the values in the url following ythe user so when they click our afflaite link, e.g darkweb.com/?aff=DAVID_SAM    they are sent to the listing homepage, where they caan select the website they want and even go to the demo, which should be perfectly done in a iframe so the url remains constant,but its not full scrren iframe so the button will say back or get this website, something liuke that so conversion is high and users is just send back to homepage and the form for that website/template pops up, one thing am not clear with right now is now bad the login and registration and template registration and how the whole system is bad with having to not even know if they are logged in or register so not that the ref and aff codes are not for registration of user, but discount of a single template/s so i need your help now create all the info and everything the website needs sop i can start working, and also i need to know repos that i can use to make the project even simpler. thanks

COMPLETE SYSTEM DOCUMENTATION & RESOURCES
Fast-Track Development Guide

🎯 CLARIFIED SYSTEM FLOW
THE CORRECT USER JOURNEY:
USER CLICKS AFFILIATE LINK
darkweb.com/?aff=DAVID_SAM
    ↓
HOMEPAGE (aff code stored in session/cookie)
    ↓
USER BROWSES TEMPLATES
User sees all available templates
    ↓
USER CLICKS "VIEW DEMO" on a template
Demo opens in IFRAME (not full screen)
URL stays: darkweb.com/template/ecommerce?aff=DAVID_SAM
Header shows: [← Back] [Get This Website]
    ↓
USER CLICKS "Get This Website"
    ↓
ORDER FORM POPUP/MODAL (aff/ref code still in session)
Form shows:
  - Name
  - Email  
  - Phone
  - Business Name
  - Select Available Domain (dropdown)
  - Price (with discount if ref code)
  - [Pay Now]
    ↓
USER PAYS via Paystack
    ↓
AUTOMATION:
  - Create user account (no password yet)
  - Send email with:
    * Website details
    * "Set your password" link
  - Mark domain as sold
  - Track affiliate commission
    ↓
USER CLICKS "Set Password" in email
    ↓
NOW USER IS REGISTERED & LOGGED IN
    ↓
USER CAN ACCESS CUSTOMER PORTAL
KEY POINTS:

✅ NO registration before purchase
✅ Account created AFTER payment
✅ aff/ref codes follow user throughout session
✅ Demo in iframe, URL stays constant
✅ Order form is popup/modal
✅ User sets password after purchase


📦 REQUIRED PHP LIBRARIES & REPOS
1. Paystack PHP Library
bash# Option 1: Composer (Recommended)
composer require yabacon/paystack-php

# Option 2: Manual Download
# Download from: https://github.com/yabacon/paystack-php
# Extract to: vendor/paystack/
2. PHPMailer (Email Sending)
bash# Option 1: Composer
composer require phpmailer/phpmailer

# Option 2: Manual Download
# Download from: https://github.com/PHPMailer/PHPMailer
# Extract to: vendor/phpmailer/
3. PHP dotenv (Environment Variables)
bash# For secure configuration
composer require vlucas/phpdotenv
4. Simple PHP Router (Clean URLs)
bash# Option: Use .htaccess for routing (no library needed)
# OR use: https://github.com/bramus/router
composer require bramus/router
5. Tailwind CSS (Frontend - CDN)
html<!-- No installation needed, use CDN -->
<script src="https://cdn.tailwindcss.com"></script>
6. Alpine.js (Lightweight JS for popups/modals)
html<!-- CDN -->
<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
7. SweetAlert2 (Beautiful Alerts)
html<!-- CDN -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
```

---

# 🗂️ COMPLETE FILE STRUCTURE WITH CONTENT
```
website-platform/
│
├── .env                        # Environment variables
├── .htaccess                   # URL rewriting
├── composer.json               # Dependencies
├── index.php                   # Entry point (router)
│
├── config/
│   ├── database.php
│   ├── config.php
│   └── paystack.php
│
├── includes/
│   ├── functions.php
│   ├── auth.php
│   ├── session.php
│   └── tracking.php            # Track aff/ref codes
│
├── classes/
│   ├── Database.php
│   ├── User.php
│   ├── Template.php
│   ├── Domain.php
│   ├── Order.php
│   ├── Payment.php
│   ├── Subscription.php
│   ├── Affiliate.php
│   ├── Referral.php
│   └── Mailer.php
│
├── public/
│   ├── home.php                # Homepage with templates
│   ├── template-demo.php       # Demo in iframe
│   ├── process-order.php       # Handle order submission
│   ├── set-password.php        # First-time password setup
│   ├── login.php
│   ├── logout.php
│   │
│   ├── payment/
│   │   ├── initialize.php      # Start Paystack payment
│   │   ├── callback.php        # After payment redirect
│   │   └── webhook.php         # Paystack webhook
│   │
│   ├── customer/
│   │   ├── dashboard.php
│   │   ├── websites.php
│   │   ├── pay-maintenance.php
│   │   └── referral.php
│   │
│   ├── affiliate/
│   │   ├── dashboard.php
│   │   └── withdraw.php
│   │
│   └── admin/
│       ├── dashboard.php
│       ├── templates.php
│       ├── domains.php
│       ├── customers.php
│       └── settings.php
│
├── assets/
│   ├── css/style.css
│   ├── js/main.js
│   └── images/
│
├── templates/
│   └── email/
│       ├── welcome.html
│       ├── set-password.html
│       └── reminder.html
│
└── vendor/                     # Composer packages

📄 COMPLETE CODE FILES
1. .env
env# Database
DB_HOST=localhost
DB_NAME=your_database
DB_USER=your_username
DB_PASS=your_password

# Site
SITE_NAME=Your Agency
SITE_URL=https://darkweb.com
SITE_EMAIL=info@darkweb.com
SUPPORT_WHATSAPP=+2348012345678

# Paystack
PAYSTACK_PUBLIC_KEY=pk_test_xxxxxxxxxxxxx
PAYSTACK_SECRET_KEY=sk_test_xxxxxxxxxxxxx

# Email (SMTP)
SMTP_HOST=smtp.gmail.com
SMTP_PORT=587
SMTP_USER=your-email@gmail.com
SMTP_PASS=your-app-password
SMTP_FROM=noreply@darkweb.com
SMTP_NAME=Your Agency

# Pricing
MAINTENANCE_FEE=10000
AFFILIATE_COMMISSION=30
REFERRAL_DISCOUNT=30
REFERRAL_CREDIT=120000

2. .htaccess
apache# Enable Rewriting
RewriteEngine On

# Force HTTPS
RewriteCond %{HTTPS} off
RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [L,R=301]

# Remove .php extension
RewriteCond %{REQUEST_FILENAME} !-d
RewriteCond %{REQUEST_FILENAME}.php -f
RewriteRule ^(.*)$ $1.php [L]

# Route everything through index.php
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteRule ^(.*)$ index.php?route=$1 [L,QSA]

# Prevent directory listing
Options -Indexes

# Security headers
<IfModule mod_headers.c>
    Header set X-XSS-Protection "1; mode=block"
    Header set X-Frame-Options "SAMEORIGIN"
    Header set X-Content-Type-Options "nosniff"
</IfModule>

# Cache static files
<IfModule mod_expires.c>
    ExpiresActive On
    ExpiresByType image/jpg "access plus 1 year"
    ExpiresByType image/jpeg "access plus 1 year"
    ExpiresByType image/gif "access plus 1 year"
    ExpiresByType image/png "access plus 1 year"
    ExpiresByType image/webp "access plus 1 year"
    ExpiresByType text/css "access plus 1 month"
    ExpiresByType application/javascript "access plus 1 month"
</IfModule>

3. index.php (Router)
php<?php
session_start();
require_once 'config/config.php';
require_once 'includes/functions.php';
require_once 'includes/tracking.php';

// Track affiliate/referral codes
track_affiliate_referral();

// Get route from URL
$route = $_GET['route'] ?? 'home';

// Clean route
$route = filter_var($route, FILTER_SANITIZE_STRING);

// Route to appropriate page
switch($route) {
    case 'home':
    case '':
        require 'public/home.php';
        break;
    
    case (preg_match('/^template\/(.+)$/', $route, $matches) ? true : false):
        $_GET['slug'] = $matches[1];
        require 'public/template-demo.php';
        break;
    
    case 'process-order':
        require 'public/process-order.php';
        break;
    
    case 'set-password':
        require 'public/set-password.php';
        break;
    
    case 'login':
        require 'public/login.php';
        break;
    
    case 'logout':
        require 'public/logout.php';
        break;
    
    case 'payment/initialize':
        require 'public/payment/initialize.php';
        break;
    
    case 'payment/callback':
        require 'public/payment/callback.php';
        break;
    
    case 'payment/webhook':
        require 'public/payment/webhook.php';
        break;
    
    // Customer routes
    case 'customer/dashboard':
        require_login();
        require 'public/customer/dashboard.php';
        break;
    
    case 'customer/websites':
        require_login();
        require 'public/customer/websites.php';
        break;
    
    // Affiliate routes
    case 'affiliate/dashboard':
        require_login('affiliate');
        require 'public/affiliate/dashboard.php';
        break;
    
    // Admin routes
    case (preg_match('/^admin\//', $route) ? true : false):
        require_login('admin');
        $admin_route = str_replace('admin/', '', $route);
        $admin_file = "public/admin/{$admin_route}.php";
        if(file_exists($admin_file)) {
            require $admin_file;
        } else {
            http_response_code(404);
            echo "Admin page not found";
        }
        break;
    
    default:
        http_response_code(404);
        require 'public/404.php';
        break;
}

4. config/database.php
php<?php
class Database {
    private static $instance = null;
    private $connection;
    
    private function __construct() {
        $host = getenv('DB_HOST');
        $dbname = getenv('DB_NAME');
        $username = getenv('DB_USER');
        $password = getenv('DB_PASS');
        
        try {
            $this->connection = new PDO(
                "mysql:host=$host;dbname=$dbname;charset=utf8mb4",
                $username,
                $password,
                [
                    PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
                    PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
                    PDO::ATTR_EMULATE_PREPARES => false,
                ]
            );
        } catch(PDOException $e) {
            die("Database connection failed: " . $e->getMessage());
        }
    }
    
    public static function getInstance() {
        if(self::$instance === null) {
            self::$instance = new self();
        }
        return self::$instance;
    }
    
    public function getConnection() {
        return $this->connection;
    }
    
    // Prevent cloning
    private function __clone() {}
    
    // Prevent unserializing
    public function __wakeup() {
        throw new Exception("Cannot unserialize singleton");
    }
}

5. config/config.php
php<?php
// Load environment variables
if(file_exists(__DIR__ . '/../.env')) {
    $lines = file(__DIR__ . '/../.env', FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
    foreach($lines as $line) {
        if(strpos(trim($line), '#') === 0) continue;
        list($name, $value) = explode('=', $line, 2);
        putenv(trim($name) . '=' . trim($value));
    }
}

// Site configuration
define('SITE_NAME', getenv('SITE_NAME'));
define('SITE_URL', getenv('SITE_URL'));
define('SITE_EMAIL', getenv('SITE_EMAIL'));
define('SUPPORT_WHATSAPP', getenv('SUPPORT_WHATSAPP'));

// Paystack configuration
define('PAYSTACK_PUBLIC_KEY', getenv('PAYSTACK_PUBLIC_KEY'));
define('PAYSTACK_SECRET_KEY', getenv('PAYSTACK_SECRET_KEY'));

// Pricing
define('MAINTENANCE_FEE', (int)getenv('MAINTENANCE_FEE'));
define('AFFILIATE_COMMISSION', (int)getenv('AFFILIATE_COMMISSION'));
define('REFERRAL_DISCOUNT', (int)getenv('REFERRAL_DISCOUNT'));
define('REFERRAL_CREDIT', (int)getenv('REFERRAL_CREDIT'));

// Paths
define('ROOT_PATH', dirname(__DIR__));
define('ASSET_PATH', SITE_URL . '/assets');

// Timezone
date_default_timezone_set('Africa/Lagos');

// Error reporting (disable in production)
if(getenv('ENVIRONMENT') === 'development') {
    error_reporting(E_ALL);
    ini_set('display_errors', 1);
} else {
    error_reporting(0);
    ini_set('display_errors', 0);
}

// Autoload classes
spl_autoload_register(function($class) {
    $file = ROOT_PATH . '/classes/' . $class . '.php';
    if(file_exists($file)) {
        require_once $file;
    }
});

// Include core functions
require_once ROOT_PATH . '/includes/functions.php';
require_once ROOT_PATH . '/includes/auth.php';
require_once ROOT_PATH . '/includes/session.php';

6. includes/tracking.php
php<?php
/**
 * Track affiliate and referral codes
 */
function track_affiliate_referral() {
    // Check for affiliate code in URL
    if(isset($_GET['aff']) && !empty($_GET['aff'])) {
        $aff_code = sanitize($_GET['aff']);
        
        // Store in session (lasts entire browsing session)
        $_SESSION['aff_code'] = $aff_code;
        
        // Store in cookie (lasts 30 days)
        setcookie('aff_code', $aff_code, time() + (30 * 24 * 60 * 60), '/');
        
        // Track click in database
        $db = Database::getInstance()->getConnection();
        $stmt = $db->prepare("
            SELECT id FROM affiliates WHERE affiliate_code = ?
        ");
        $stmt->execute([$aff_code]);
        $affiliate = $stmt->fetch();
        
        if($affiliate) {
            // Log the click
            $stmt = $db->prepare("
                INSERT INTO affiliate_clicks (affiliate_id, ip_address, user_agent, referrer_url)
                VALUES (?, ?, ?, ?)
            ");
            $stmt->execute([
                $affiliate['id'],
                $_SERVER['REMOTE_ADDR'],
                $_SERVER['HTTP_USER_AGENT'] ?? '',
                $_SERVER['HTTP_REFERER'] ?? ''
            ]);
            
            // Increment click count
            $stmt = $db->prepare("
                UPDATE affiliates SET total_clicks = total_clicks + 1 WHERE id = ?
            ");
            $stmt->execute([$affiliate['id']]);
        }
    }
    
    // Check for referral code in URL
    if(isset($_GET['ref']) && !empty($_GET['ref'])) {
        $ref_code = sanitize($_GET['ref']);
        
        // Store in session
        $_SESSION['ref_code'] = $ref_code;
        
        // Store in cookie (30 days)
        setcookie('ref_code', $ref_code, time() + (30 * 24 * 60 * 60), '/');
    }
}

/**
 * Get active affiliate code
 */
function get_active_aff_code() {
    // Check session first, then cookie
    if(isset($_SESSION['aff_code'])) {
        return $_SESSION['aff_code'];
    }
    if(isset($_COOKIE['aff_code'])) {
        $_SESSION['aff_code'] = $_COOKIE['aff_code'];
        return $_COOKIE['aff_code'];
    }
    return null;
}

/**
 * Get active referral code
 */
function get_active_ref_code() {
    // Check session first, then cookie
    if(isset($_SESSION['ref_code'])) {
        return $_SESSION['ref_code'];
    }
    if(isset($_COOKIE['ref_code'])) {
        $_SESSION['ref_code'] = $_COOKIE['ref_code'];
        return $_COOKIE['ref_code'];
    }
    return null;
}

/**
 * Calculate final price with discounts
 */
function calculate_order_price($base_price) {
    $final_price = $base_price;
    $discount = 0;
    $discount_type = null;
    
    $ref_code = get_active_ref_code();
    
    if($ref_code) {
        // Apply referral discount
        $discount = ($base_price * REFERRAL_DISCOUNT) / 100;
        $final_price = $base_price - $discount;
        $discount_type = 'referral';
    }
    
    return [
        'base_price' => $base_price,
        'discount' => $discount,
        'final_price' => $final_price,
        'discount_type' => $discount_type
    ];
}

7. includes/functions.php
php<?php
/**
 * Sanitize input
 */
function sanitize($data) {
    return htmlspecialchars(strip_tags(trim($data)), ENT_QUOTES, 'UTF-8');
}

/**
 * Validate email
 */
function validate_email($email) {
    return filter_var($email, FILTER_VALIDATE_EMAIL);
}

/**
 * Validate phone (Nigerian format)
 */
function validate_phone($phone) {
    $phone = preg_replace('/[^0-9]/', '', $phone);
    return (strlen($phone) >= 10 && strlen($phone) <= 14);
}

/**
 * Generate random token
 */
function generate_token($length = 32) {
    return bin2hex(random_bytes($length / 2));
}

/**
 * Generate unique code
 */
function generate_unique_code($prefix = '', $length = 8) {
    $characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    $code = '';
    for($i = 0; $i < $length; $i++) {
        $code .= $characters[rand(0, strlen($characters) - 1)];
    }
    return $prefix . $code;
}

/**
 * Format money (Naira)
 */
function format_money($amount) {
    return '₦' . number_format($amount, 0, '.', ',');
}

/**
 * Format date
 */
function format_date($date, $format = 'M d, Y') {
    return date($format, strtotime($date));
}

/**
 * Time ago function
 */
function time_ago($datetime) {
    $time = strtotime($datetime);
    $time_diff = time() - $time;
    
    if($time_diff < 60) {
        return 'just now';
    } elseif($time_diff < 3600) {
        $mins = floor($time_diff / 60);
        return $mins . ' minute' . ($mins > 1 ? 's' : '') . ' ago';
    } elseif($time_diff < 86400) {
        $hours = floor($time_diff / 3600);
        return $hours . ' hour' . ($hours > 1 ? 's' : '') . ' ago';
    } elseif($time_diff < 604800) {
        $days = floor($time_diff / 86400);
        return $days . ' day' . ($days > 1 ? 's' : '') . ' ago';
    } else {
        return date('M d, Y', $time);
    }
}

/**
 * Redirect
 */
function redirect($url) {
    header("Location: $url");
    exit;
}

/**
 * JSON response
 */
function json_response($data, $status = 200) {
    http_response_code($status);
    header('Content-Type: application/json');
    echo json_encode($data);
    exit;
}

/**
 * Flash message
 */
function set_flash($type, $message) {
    $_SESSION['flash'] = [
        'type' => $type,
        'message' => $message
    ];
}

function get_flash() {
    if(isset($_SESSION['flash'])) {
        $flash = $_SESSION['flash'];
        unset($_SESSION['flash']);
        return $flash;
    }
    return null;
}

/**
 * Check if user is logged in
 */
function is_logged_in() {
    return isset($_SESSION['user_id']);
}

/**
 * Require login
 */
function require_login($role = null) {
    if(!is_logged_in()) {
        set_flash('error', 'Please login to continue');
        redirect(SITE_URL . '/login');
    }
    
    if($role && $_SESSION['user_role'] !== $role) {
        set_flash('error', 'Access denied');
        redirect(SITE_URL);
    }
}

/**
 * Get current user
 */
function get_current_user() {
    if(!is_logged_in()) {
        return null;
    }
    
    $db = Database::getInstance()->getConnection();
    $stmt = $db->prepare("SELECT * FROM users WHERE id = ?");
    $stmt->execute([$_SESSION['user_id']]);
    return $stmt->fetch();
}

/**
 * Send email
 */
function send_email($to, $subject, $body, $alt_body = '') {
    $mailer = new Mailer();
    return $mailer->send($to, $subject, $body, $alt_body);
}

/**
 * Log activity
 */
function log_activity($user_id, $action, $description = '') {
    $db = Database::getInstance()->getConnection();
    $stmt = $db->prepare("
        INSERT INTO activity_logs (user_id, action, description, ip_address, user_agent)
        VALUES (?, ?, ?, ?, ?)
    ");
    $stmt->execute([
        $user_id,
        $action,
        $description,
        $_SERVER['REMOTE_ADDR'],
        $_SERVER['HTTP_USER_AGENT'] ?? ''
    ]);
}

8. includes/auth.php
php<?php
/**
 * Hash password
 */
function hash_password($password) {
    return password_hash($password, PASSWORD_BCRYPT);
}

/**
 * Verify password
 */
function verify_password($password, $hash) {
    return password_verify($password, $hash);
}

/**
 * Login user
 */
function login_user($email, $password) {
    $db = Database::getInstance()->getConnection();
    
    $stmt = $db->prepare("SELECT * FROM users WHERE email = ?");
    $stmt->execute([$email]);
    $user = $stmt->fetch();
    
    if(!$user) {
        return ['success' => false, 'message' => 'Invalid email or password'];
    }
    
    if(!verify_password($password, $user['password'])) {
        return ['success' => false, 'message' => 'Invalid email or password'];
    }
    
    if(!$user['email_verified']) {
        return ['success' => false, 'message' => 'Please verify your email first'];
    }
    
    // Set session
    $_SESSION['user_id'] = $user['id'];
    $_SESSION['user_name'] = $user['name'];
    $_SESSION['user_email'] = $user['email'];
    $_SESSION['user_role'] = $user['role'];
    
    // Log activity
    log_activity($user['id'], 'login', 'User logged in');
    
    return ['success' => true, 'user' => $user];
}

/**
 * Logout user
 */
function logout_user() {
    if(is_logged_in()) {
        log_activity($_SESSION['user_id'], 'logout', 'User logged out');
    }
    
    session_destroy();
    redirect(SITE_URL);
}

/**
 * Create user account (after purchase)
 */
function create_user_account($data) {
    $db = Database::getInstance()->getConnection();
    
    // Check if email exists
    $stmt = $db->prepare("SELECT id FROM users WHERE email = ?");
    $stmt->execute([$data['email']]);
    if($stmt->fetch()) {
        return ['success' => false, 'message' => 'Email already exists'];
    }
    
    // Generate verification token
    $token = generate_token();
    
    // Create user
    $stmt = $db->prepare("
        INSERT INTO users (name, email, phone, password, role, email_verification_token)
        VALUES (?, ?, ?, ?, ?, ?)
    ");
    
    // Temporary password (they'll set real one via email)
    $temp_password = hash_password(generate_token(16));
    
    $stmt->execute([
        $data['name'],
        $data['email'],
        $data['phone'],
        $temp_password,
        $data['role'] ?? 'customer',
        $token
    ]);
    
    $user_id = $db->lastInsertId();
    
    // Send set password email
    send_set_password_email($data['email'], $data['name'], $token);
    
    return ['success' => true, 'user_id' => $user_id, 'token' => $token];
}

/**
 * Send set password email
 */
function send_set_password_email($email, $name, $token) {
    $set_password_url = SITE_URL . "/set-password?token=$token";
    
    $subject = "Set Your Password - " . SITE_NAME;
    $body = "
        <h2>Welcome to " . SITE_NAME . "!</h2>
        <p>Hi $name,</p>
        <p>Your website has been successfully delivered! To access your customer portal and manage your subscription, please set your password:</p>
        <p><a href='$set_password_url' style='display:inline-block;padding:12px 24px;background:#4F46E5;color:white;text-decoration:none;border-radius:6px;'>Set Password</a></p>
        <p>Or copy this link: $set_password_url</p>
        <p>This link will expire in 24 hours.</p>
    ";
    
    send_email($email, $subject, $body);
}

/**
 * Verify email and set password
 */
function verify_and_set_password($token, $password) {
    $db = Database::getInstance()->getConnection();
    
    $stmt = $db->prepare("
        SELECT * FROM users 
        WHERE email_verification_token = ? 
        AND email_verified = 0
    ");
    $stmt->execute([$token]);
    $user = $stmt->fetch();
    
    if(!$user) {
        return ['success' => false, 'message' => 'Invalid or expired token'];
    }
    
    // Update user
    $stmt = $db->prepare("
        UPDATE users 
        SET password = ?, email_verified = 1, email_verification_token = NULL 
        WHERE id = ?
    ");
    $stmt->execute([hash_password($password), $user['id']]);
    
    // Auto login
    $_SESSION['user_id'] = $user['id'];
    $_SESSION['user_name'] = $user['name'];
    $_SESSION['user_email'] = $user['email'];
    $_SESSION['user_role'] = $user['role'];
    
    return ['success' => true];
}

9. public/home.php (Homepage with Templates)home.php - Homepage with Template ListingCode <?php
require_once 'config/config.php';

// Get all active templates
$db = Database::getInstance()->getConnection();
$stmt = $db->prepare("SELECT * FROM templates WHERE status = 'active' ORDER BY created_at DESC");
$stmt->execute();
$templates = $stmRetryClaude does not have the ability to run the code it generates yet.P

Perfect — now I fully understand what you want. ✅

Let me restate it to make sure we’re on the same page before I show you the exact approach:


---

🔍 What You’re Actually Building

A template marketplace built in plain PHP (no frameworks).

No registration or login for customers — just select a template, fill contact details, pay, get confirmation + email + WhatsApp link.

Affiliate accounts are only created by the admin from dashboard (each with code, email, password).

Affiliates log in using that account → see a very simple dashboard (earnings, payout, maybe referral link).

Admin controls everything (templates, affiliates, orders, payouts).

You want a nice UI, but written in a way you can understand — simple, clean HTML/CSS/JS (no React, no frameworks).

You’d also like sample repositories or starter projects in plain PHP with good UI and structure, so you can learn from them and build yours.



---

Let’s build this roadmap for plain PHP and then I’ll give you:

1. How to get a nice UI while using plain PHP


2. Project folder structure + file explanations


3. Open-source repos (real PHP projects) close to what you’re trying to build


4. Step-by-step how to start your marketplace




---

🧱 1. How to Get a Good UI in Plain PHP

Since you’re good with PHP but not design tools, do this:

Option 1 — Use a ready-made admin template (Bootstrap-based)

Use Bootstrap 5 HTML admin templates. They’re plug-and-play, only need you to add PHP tags into the HTML.
Examples:

AdminLTE – free, responsive, easy to integrate.

SB Admin 2 – lightweight, perfect for dashboards.

NiceAdmin – modern look.


You can use any of them by:

1. Downloading the HTML files.


2. Renaming .html to .php.


3. Adding your PHP logic between <?php ... ?>.



Example:

<?php include('header.php'); ?>
<div class="container">
  <h3>Templates</h3>
  <?php
    $templates = getTemplates();
    foreach($templates as $t) {
        echo "<div class='card p-3 my-2'>
                <h4>{$t['title']}</h4>
                <p>Price: ₦{$t['price']}</p>
                <a href='buy.php?id={$t['id']}' class='btn btn-primary'>Buy Now</a>
              </div>";
    }
  ?>
</div>
<?php include('footer.php'); ?>

That’s it — Bootstrap handles the nice look, you just add your PHP logic.


---

🗂️ 2. Recommended Folder Structure (Plain PHP)

Here’s a simple way to structure your project cleanly:

project/
│
├── config/
│   └── db.php             # database connection
│
├── admin/
│   ├── index.php          # admin dashboard
│   ├── affiliates.php     # manage affiliates
│   ├── templates.php      # manage templates
│   └── payouts.php
│
├── affiliate/
│   ├── login.php
│   ├── dashboard.php
│   └── logout.php
│
├── public/
│   ├── index.php          # template marketplace homepage
│   ├── buy.php            # user purchase form
│   ├── success.php        # payment success modal
│   └── assets/
│       ├── css/
│       ├── js/
│       └── images/
│
├── includes/
│   ├── header.php
│   ├── footer.php
│   ├── functions.php      # common reusable functions
│
├── webhook.php            # handles payment webhooks
├── verify.php             # verify payment manually
└── README.md

This keeps your logic clean and lets you include header/footer for consistent UI.


---

💡 3. Real Repos & Examples to Learn From

These are plain PHP repos (no Laravel, no frameworks) that you can learn from and reuse parts of their UI & structure.

Purpose	Repo	Description

✅ Admin panel + login + CRUD	php-login-system	A good starting point to build your admin/affiliate system.
✅ Full Bootstrap dashboard	AdminLTE	Add PHP logic on top of it for your admin area.
✅ Payment integration (Paystack in PHP)	Paystack PHP Example	Actual PHP code for Paystack verification + webhook.
✅ Small PHP marketplace	php-multi-vendor-marketplace	A bit bigger, but shows product listing & user flow.
✅ Email sending example	PHPMailer	Use this to send purchase confirmation emails.


These will give you everything you need to piece together your own project confidently.


---

🛠️ 4. Step-by-Step Plan to Build It Yourself (Plain PHP)

Step 1 — Setup database & config

Tables: admins, affiliates, templates, orders, payouts.

Create config/db.php:

<?php
$mysqli = new mysqli("localhost", "root", "", "marketplace");
if ($mysqli->connect_errno) {
  die("Database connection failed: " . $mysqli->connect_error);
}
?>

Step 2 — Admin: Create Affiliate

Form with affiliate_code, email, password.

Insert into DB.

Optionally send them their login details using PHPMailer.


Step 3 — Affiliate Dashboard

Simple login form → verify email/password.

Dashboard shows:

echo "Total Earnings: ₦" . getEarnings($affiliate_id);
echo "Total Payouts: ₦" . getPayouts($affiliate_id);


Step 4 — Template Marketplace

index.php lists all templates.

Each “Buy Now” links to buy.php?id=XX.

On buy.php, show contact form (name, email, WhatsApp) and call Paystack API for payment.


Step 5 — Payment Integration (Paystack)

Use Paystack’s sample PHP backend: https://github.com/PaystackHQ/sample-php-backend

In your webhook:

Verify payment using reference.

If success → update order → send email + show modal.


Step 6 — Email + Modal

Use PHPMailer to send email:

$mail->Subject = "Your Purchase Details";
$mail->Body = "Template: XYZ\nOrder Ref: 12345\nPlease save this info!";
$mail->send();

In modal (success.php):

<div class="alert alert-success">
  <h4>Payment Successful 🎉</h4>
  <p>Here are your details:</p>
  <textarea readonly class="form-control">Order Ref: 12345...</textarea>
  <button onclick="copyText()" class="btn btn-secondary">Copy Text</button>
  <a href="https://wa.me/234XXXXXXXXXX?text=I%20just%20paid%20for%20template%20REF12345" class="btn btn-success mt-2">Chat with Developer</a>
</div>

Step 7 — Admin Dashboard

Add links: “Manage Templates”, “View Orders”, “Add Affiliate”, “Payouts”.

Use AdminLTE or SB Admin HTML for layout.



---

🎨 5. How to Get a Beautiful UI Quickly (No CSS Skills Needed)

Just use Bootstrap 5 — you don’t need to design from scratch.

Add this line in your header:

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">

Then you can wrap everything easily:

<div class="container mt-5">
  <div class="card p-3">
    <h3>Buy Template</h3>
    <form> ... </form>
  </div>
</div>

Bootstrap will make it look modern automatically.


---

🔗 Next Step Options for You

If you want, I can:

1. Build you a clean folder starter (zip) — plain PHP + Bootstrap + working admin/affiliate/login structure (no frameworks).


2. Or write the full PHP implementation plan for your payment + modal + email system (just PHP, step-by-step).


3. Or help you customize AdminLTE into your project structure so it’s ready for your own files.



Which one should I do next for you?

Nice — this is clear and I like the direction. Below I’ve turned everything you wrote into a detailed, practical implementation guide and developer doc you can follow to build the marketplace exactly the way you want it (no registration for regular users, admin-created affiliate accounts, simple template purchase flow, verified payments, emailed purchase details, copy-to-clipboard + “chat with developer” via WhatsApp, tiny affiliate dashboard). I focus on architecture, data models, API endpoints, UI/UX behavior, payment/webhook verification, email/WhatsApp integration, security, and an actionable implementation checklist you can follow. I didn’t include full runnable code (you said you didn’t want code), but I give clear pseudo-code, examples, and references so you (or a developer you hire) can implement confidently.


---

Executive summary (what you want)

No user signup for ordinary customers. They only choose a template, enter contact details (name, email, WhatsApp), pay, and immediately see a modal with the site details which is also emailed.

Admin creates affiliate accounts from admin dashboard (admin supplies affiliate code, email, and password; the affiliate uses those credentials to sign in and then edits their details).

Affiliates have a tiny dashboard: earnings, payouts, and stats only (no template marketplace).

Payment must be verified server-side (webhook + verify endpoint) before showing “success” modal / provisioning.

After successful payment show modal with plain text copy (and a “Copy text” button) and a strong warning asking buyer to save it; also show a “Chat with developer” button that opens WhatsApp with a prefilled message so you can handle subscriptions, bonuses, onboarding, etc., over WhatsApp.

Use webhooks to reduce complexity: payment provider calls your webhook when payment is complete; your server verifies the signature and then performs provisioning and emails the buyer.



---

Recommended technology choices (stack & services)

(You can swap some parts depending on your skills — these are commonly used and well-supported.)

Frontend

React (or Next.js) + Tailwind CSS for fast UI and template previews.

Template marketplace pages: static/SSR so they load fast.


Backend / API

Node.js + Express / NestJS or Django REST Framework. Both are mature; Node often used with Paystack/Flutterwave SDKs.

Use environment configs to store secret keys.


Database

PostgreSQL (reliable and widely used). Store templates, orders, affiliates, payouts, etc.


File/storage

S3-compatible storage (AWS S3, DigitalOcean Spaces) for template assets and generated files.


Payments

Paystack or Flutterwave for Nigerian customers — both provide solid APIs, SDKs and webhooks. Use either one as primary payment provider and verify payments server-side using webhooks + verify endpoint. (Docs: Paystack dev docs, Flutterwave dev docs). 


Email

SendGrid or Mailgun to send transactional emails (purchase receipts with the details).


WhatsApp link / support

For simple chat: click-to-chat link (wa.me with prefilled text). For automated or scalable messaging, use the WhatsApp Cloud API. 


Notes about Stripe

Stripe can be used in Nigeria only indirectly or via supported partners; Paystack and Flutterwave are easier if you target Nigerian customers. (If you prefer Stripe, check Stripe’s local availability and methods.) 



---

High-level user flows

1. Admin -> Create affiliate (one-time)

Admin UI: create affiliate form (affiliate_code e.g. JOHNNY, email, password).

Server: create affiliate record, hash password, optionally send an email (with temp password and activation link).

Affiliate logs in using that email+password, updates profile and sees a minimal dashboard.



2. Customer (no account) -> buy template (single flow)

Page: template gallery -> user selects template -> fills contact form (contact name, email, WhatsApp number) -> clicks Pay.

Payment initialization: server creates order record with status pending and calls payment provider to initialize transaction (returns checkout link or popup).

Customer completes payment in the provider UI.

Payment provider calls your webhook (server). Server verifies webhook signature and either:

marks order paid and provisions the product (generate site details or template delivery text),

sends transactional email to buyer with purchase details,

returns success status to payment provider.


Immediately after server sets paid, you:

open a success modal in the user’s browser (if you rely on redirect flow, you’ll redirect to the success page; better: rely on webhook to confirm and then in front-end poll/subscribe for confirmation or use the provider’s popup/onsuccess hooks),

show the generated plain-text details with a Copy button,

display a strong red reminder: “Save this text — it’s the only way to access your purchase”,

show “Chat with developer” button linking to WhatsApp (prefilled message including order ref).




3. Affiliate usage

Affiliate logs in using the credentials admin created.

Affiliate dashboard: show only Earnings, Payouts, Referral code and Basic profile settings. Provide a simple CSV export of earnings and payout request button.

Admin manages payouts separately in admin UI.





---

Database model (core tables)

Design trimmed to the features you described.

1. admins

id, name, email, password_hash, role



2. affiliates

id, code (e.g. JOHNNY), email, password_hash, display_name, phone, earnings_balance, created_at, metadata



3. templates

id, slug, title, preview_image_url, price, category, metadata



4. orders

id, reference (unique), template_id, buyer_name, buyer_email, buyer_whatsapp, affiliate_code (nullable), amount, currency, status (pending|paid|failed|refunded), payment_provider, provider_response, created_at



5. payouts

id, affiliate_id, amount, status, requested_at, processed_at



6. audit_logs (webhooks / server events)

id, event_type, payload, created_at




Notes:

Keep provider_response raw JSON for debugging.

Store only needed PII (email, phone) and follow local law for retention.



---

API endpoints (minimal)

These endpoints will be enough to implement the flow you want.

Public

GET /templates — list templates.

GET /templates/:slug — template details.


No-account purchase

POST /orders — create order record, pass buyer info and template id; returns payment initialization data.

POST /payments/verify (optional) — one-off verify by reference.

POST /webhooks/payments — payment provider hits this; verify signature then update order status and trigger provisioning/email.


Admin (protected)

POST /admin/affiliates — create affiliate (admin-only). Fields: code, email, temp_password (or generated).

GET /admin/affiliates/:id — view

PUT /admin/affiliates/:id — update

GET /admin/orders — list orders

POST /admin/payouts — process payouts (or export CSV)


Affiliate (protected, small scope)

POST /affiliate/login — returns session or JWT

GET /affiliate/dashboard — earnings, payouts



---

Payment integration details (Paystack & Flutterwave) — IMPORTANT

Use a webhook + server-side verify flow. Don’t rely only on client redirects.

Why: If the user closes the window after payment but before redirect, you still get a webhook confirming the payment and can provision the product.

How to implement (conceptual)

1. Initialize transaction server-side (create order record with pending).


2. Send the client the checkout link or token from provider.


3. Provider processes payment.


4. Provider sends webhook to your /webhooks/payments endpoint.


5. Your webhook handler:

Verifies the webhook signature using provider-secret (Paystack uses x-paystack-signature and HMAC-SHA512; Flutterwave uses verif-hash or configured secret hash). Always verify signature before trusting payload. 

Optionally call the provider’s Verify Transaction API using transaction reference to double-check the transaction status. Paystack provides a Verify endpoint you can call server-side. 

If status == success mark order paid and run provisioning: generate the delivery text, email the buyer, and mark order complete.




Relevant docs (read these when you implement):

Paystack docs (API & webhooks). 

Flutterwave docs (webhooks & v4 API). 


Example of signature verification logic (pseudocode)

// Paystack (Express example pseudocode)
rawBody = readRawRequestBody()           // do NOT let body-parser modify it
signature = req.headers['x-paystack-signature']
computed = HMAC_SHA512(rawBody, PAYSTACK_SECRET)
if computed != signature: reject (400)

payload = parseJson(rawBody)
if payload.event == 'charge.success':
    ref = payload.data.reference
    // optionally call Paystack verify endpoint using server key
    markOrderPaid(ref)
    sendEmail(order)

For Flutterwave the header is verif-hash if you set a secret; compare it to your secret hash. 


---

Email & modal content (what to send & show)

When payment verified, generate:

Unique order reference

Simple credentials or site access instructions (if you provision a site, include URL + admin username + password; if you don’t auto-generate site, include instructions and contact steps)

Affiliate info (if purchase via affiliate)

Receipt details (amount, template title, date)


Modal text (example):

Big heading: Payment successful ✅

Body: “Below are your purchase details. COPY & SAVE them now — we will send a copy by email, but this is the only place you’ll see the full text.”

Display a plain text block (the text that will be emailed). Provide a one-click Copy button.

Below: Red reminder: “Important: Save this text now. Without it, access may be lost.”

Button: “Chat with developer” → opens https://wa.me/<number>?text=I%20paid%20for%20template%20REF123%20-%20I%20need%20guidance (URL-encode message). Use WhatsApp click-to-chat for direct contact. 


Email template (subject): “Your purchase — [TemplateName] — [OrderRef]” Email body: repeat the modal plain text and include next steps and link to WhatsApp support.


---

WhatsApp support options

Simple approach: Click-to-chat (wa.me) with prefilled message. Works well for manual onboarding and keeps code simple. 

Advanced: WhatsApp Cloud API to send automated messages (e.g., welcome message, order confirmation), but that requires setup with Meta and message templates if you want to initiate conversations at scale. Use Cloud API if you want automation. 



---

Security, anti-fraud and best practices

Always verify webhook signatures (Paystack: x-paystack-signature, Flutterwave: verif-hash). Reject if invalid. 

Keep secret keys in environment variables (never in code).

Use HTTPS for all endpoints (payment callbacks must be public and secure).

Rate-limit webhook endpoint and admin endpoints.

For admin-created affiliate passwords: encourage immediate reset on first login; store only hashed passwords (bcrypt).

For orders: don’t provision until you verify payment (do verify by calling provider verify endpoint if needed).

Log webhook payloads to audit table for debugging; don’t expose logs to public.



---

UX details & UI components (important small things)

Template selection page: show clear price, preview button, and “Buy now” CTA.

On Buy, show a small lightweight contact form (3 fields: name, email, WhatsApp). Keep labels clear.

Payment button → open provider popup or redirect to provider checkout.

While waiting for server confirmation, show a loading state; use optimistic UI only if provider returns success immediately.

Success modal must be plainly copyable text (monospace block) and have a “Copy” button that copies to clipboard and briefly shows a toast “Copied”.

Include “Email me these details” (checkbox) — but always send the email server-side after webhook confirmation.

For affiliates, minimal dashboard layout: two cards (Earnings, Available for Payout), a small chart (optional) and a Payout Request button.



---

Admin UX (what admin needs)

Create affiliate modal: code [JOHNNY], email, initial password (or auto-generate). When created, send email to affiliate with instructions.

Affiliate management: search, edit, suspend.

Orders list: filter by status, search by reference/email.

Payouts: mark processed and export.



---

Testing & QA

Use sandbox/test keys from Paystack/Flutterwave to simulate flows. Both providers offer sandboxes and ways to send test webhooks. 

Test failure states: failed payment, delayed webhook, duplicate webhook.

Use tools like ngrok for local webhook testing.

Test email deliverability with SendGrid’s sandbox and check spam.



---

Deployment & operations

Deploy backend to a server with stable HTTPS (Heroku, Render, Railway, or AWS EC2/Elastic Beanstalk). Host frontend on Vercel or Netlify for simplicity.

Put health checks and monitoring (Sentry for errors, simple uptime monitors).

Make the webhook URL stable and add it to provider dashboard.

Rotate keys if a secret leak is suspected.



---

Implementation roadmap (milestones — no time estimates)

1. Data model + DB migration.


2. Backend: admin endpoints + affiliate creation.


3. Backend: order creation and payment initialization.


4. Integrate payment provider sandbox + webhook handler with signature verification.


5. Email integration (SendGrid) for transactional emails.


6. Frontend: template gallery + purchase flow + success modal + copy-to-clipboard + WhatsApp link.


7. Affiliate dashboard.


8. End-to-end testing with sandbox webhooks.


9. Deploy to production and update provider webhook URL + keys.


10. QA, monitoring, and go-live.




---

Sample pseudo-checklist for webhooks & payment verify (copyable)

[ ] Create order row with pending status and unique reference.

[ ] Initialize transaction with provider and send checkout handle to client.

[ ] Save provider response (for debugging) to order.provider_response.

[ ] Implement /webhooks/payments:

verify signature header (Paystack x-paystack-signature / Flutterwave verif-hash). 

re-verify transaction with provider verify endpoint (optional but recommended). 

on success: mark order paid, generate delivery text, send email, and notify buyer (frontend or email).


[ ] Show success modal (front-end) that uses the server-provided generated text. Provide Copy button and a WhatsApp support button.



---

Example copy for the “Chat with developer” button (WhatsApp click-to-chat)

Use the URL pattern: https://wa.me/<phone_in_international_format>?text=<urlencoded_message>

Example prefilled message: I paid for template REF123 and need help setting it up. My name: John Doe. Email: john@example.com.

Docs: WhatsApp click-to-chat. 


---

Helpful references (read before implementing)

Paystack docs (API + webhooks). 

Flutterwave developer docs & webhooks. 

WhatsApp Cloud API & click-to-chat docs. 



---

Notes where you can simplify & reduce code complexity (from what you wrote)

Skip building a full affiliate marketplace UI — admin creates affiliate accounts; affiliates only need a tiny dashboard (earnings/payouts). No need to expose the whole template store to affiliates.

Keep customer flow stateless: no accounts, a single orders table record tracks everything.

Use click-to-chat (wa.me) instead of WhatsApp Cloud API for now — much simpler and avoids message template approvals.

If you don’t want to auto-provision sites, you can just email the buyer with instructions and manually provision on request via WhatsApp. This keeps the MVP very simple.



---

If you want, I can now:

Produce a technical spec document you can give to a developer (I’ll write it as a step-by-step ticket list), or

Produce a detailed admin and affiliate UX spec with screenshots/wireframes described in text, or

Draft the exact email + modal text (copy-and-paste ready) you’d send to buyers and affiliates.


Tell me which of those you want next and I’ll produce it straight away (no code unless you want it).



