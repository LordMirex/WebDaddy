okay this shouldn't not be long i will make the core decisions so you can start your work, remember you are a full-stack engineer, so act as a senior engineer.

core decisions:

Theres nothing like referal, as i want the commissions to just be for affliates that will  contact and create their afflaite accounts for, and most importantly their dashboard and sections is one of the most important after the portfolio itself.


no referal just affliates so the afflates send their link to their users or if the user js an organic user he can also just fill the input which how which was on the url would have been non editable and filled.

We are finding the affliates ourself and paying then any agreed onetime fee then they will be recieving future commissions on sales, for user who want to refer their friends they can just tell us on whatsapp that they refered their friend then we can give them any commission as its not official. because user  will sometimes forget to add the affliate code, so we can store them on sessions or cookies so i need you to think for me

For the templates and domain, on the admin page he suppose to just add urls and remove sold urls, but i need a very good record taking and good admin application that when the user tells me thata they want a url i can then go to the list on the website and mark as sold and i am thinking right now that it will be good vthat they will also be a inventory system so as i mark the domain as sold i can add the user details and notes incase of subsciption, managemnent, renewals and others especially user websites

And when a admin adds available domains to a template, he can choose to not even add, so when he doest add a domain or theres no availble domain, then the select url feauture will just be hidden totally, and now for the main part which is onboarding to payment, the system i was first talked about using auto payment after form but i dont want my users to be stressed as most of them are not tech educated so i am planning a way to make them fill the simple form then after its filled a sweet way startt whatsapp chat request that me and the user can then talk after that, and pay as we are chatting, so we on the chat do all the business deals.


and many more, i have not even tyalked about the designs of the web pages and others so here is where i give you ahead to deliver and send me everything i need for the project, remember not code but all documentations, guide and everything and every single detail of the project, remember is php and mysql, whatsapp

# SPEC-1-Website Template Marketplace (PHP + MySQL + WhatsApp)

## Background

You run a software agency that sells pre-built website templates. A celebrity affiliate partnership is bringing more clients and you need a fast, reliable system to convert leads into paid customers and deliver websites quickly. You want a minimal-automation, highly controlled workflow: customers preview templates in an iframe, pick an available pre-hosted domain, fill a short onboarding form, and start a WhatsApp chat with your team to complete payment and customization. Affiliates are created and managed by admin and earn commission on sales originating from their code/link. The tech stack: **plain PHP, MySQL, cPanel hosting, PHPMailer, WhatsApp (chat links), and Bootstrap for UI**.

---

## Requirements (MoSCoW)

### Must have

* Public portfolio/storefront showcasing templates with live demos (iframe preview).
* Simple order/onboarding form per-template that auto-generates a WhatsApp message and preserves affiliate info via URL param, session, or cookie.
* Admin panel to manage templates, add/remove available domains (inventory), mark domains as sold, attach customer details and notes (subscriptions, renewals, customizations).
* Affiliate system where admin creates affiliate accounts, each with unique code and dashboard for earnings and withdrawal requests.
* Strong record-keeping: orders, domain inventory, customer notes, affiliate commissions (calculated automatically), withdrawal requests.
* Secure PHP/MySQL implementation: input sanitization, password hashing, HTTPS enforcement.

### Should have

* Session/cookie logic to persist affiliate code for 30 days (so users don’t lose the code if they navigate away).
* Modal success flow (copyable credentials) after admin confirms sale (email via PHPMailer).
* Exportable reports for sales, domain inventory, affiliate earnings (CSV).
* Small, clean mobile-first UI using Bootstrap for fast development.

### Could have

* Optional Paystack/online payment integration for future use (but currently off — WhatsApp first).
* Email templates editor in admin panel.
* Simple analytics page with clicks per affiliate (requires a click-tracking endpoint).

### Won't have (initial MVP)

* Customer accounts / customer-side dashboard.
* Full automation of suspension, auto-renewal, or domain provisioning.
* Public referral program (only official affiliates managed by admin).

---

## Method

### High-level architecture

* **Public Web App (public/)** — PHP pages: index (templates list), template detail, demo iframe modal, order form (builds WhatsApp message + stores a pending order row), static assets.
* **Admin App (admin/)** — PHP pages for login, templates CRUD, domains inventory (assign domain ⇄ template), customers/orders, affiliates management, withdrawals, notes, CSV export.
* **Affiliate App (affiliate/)** — login, readonly dashboard: total earnings, pending withdrawals, request withdrawal form.
* **Database (MySQL)** — central relational DB with tables for users (admins, affiliates), templates, domains, orders, sales, affiliate_clicks, withdrawal_requests, activity logs, settings.
* **Email** — PHPMailer for transactional emails (order confirmation, affiliate notifications).
* **WhatsApp** — order flow uses `https://wa.me/<number>?text=<encoded message>` links generated from form data and stored server-side as a pending order.

### Data flow (simplified)

1. Public user views template and demo (iframe). If URL includes `?aff=CODE`, store in session/cookie.
2. User clicks "Get This Website" → fills short form (fields vary per template). Form submission writes a `pending_order` record and redirects to a pre-filled WhatsApp chat with your number.
3. Conversation on WhatsApp: admin confirms payment. Admin opens the pending order in admin panel, marks it `paid` and assigns the chosen domain to the customer (domain status -> in_use). Admin enters credentials/notes and triggers a PHPMailer email to the customer with details and tutorial links.
4. If an affiliate code was present, the system computes affiliate commission (e.g., 30% of base price) and credits the affiliate's `commission_pending` balance. Admin processes payouts manually via withdrawal requests.

### Database schema (concise)

Below is the recommended minimal schema (columns shown are essential fields). Use InnoDB, proper indexes, and foreign keys where supported.

```
TABLE users
- id, name, email, phone, password_hash, role ENUM('admin','affiliate'), bank_details, created_at

TABLE templates
- id, name, slug, price, category, description, demo_url, video_links JSON, active

TABLE domains
- id, template_id, domain_name, status ENUM('available','in_use','suspended'), assigned_customer_id, notes, created_at

TABLE pending_orders
- id, template_id, chosen_domain_id (nullable), name, email, phone, custom_fields JSON, affiliate_code (nullable), session_id, message_text, status ENUM('pending','paid','cancelled'), created_at

TABLE sales
- id, pending_order_id, admin_id, amount_paid, commission_amount, payment_method (text), payment_confirmed_at

TABLE affiliates
- id, user_id, code, total_clicks, total_sales, commission_earned, commission_pending, commission_paid, status

TABLE withdrawal_requests
- id, affiliate_id, amount, bank_details_json, status, requested_at, processed_at, processed_by

TABLE activity_logs
- id, user_id, action, details JSON, ip, created_at
```

(Full SQL DDL will be provided in Implementation section.)

### PlantUML diagrams

**System components (high level)**

```plantuml
@startuml
actor "Public User" as U
actor "Admin" as A
actor "Affiliate" as F
rectangle "Public Site (PHP)" as Public
rectangle "Admin Site (PHP)" as AdminApp
rectangle "Affiliate Site (PHP)" as AffApp
database "MySQL DB" as DB
cloud "WhatsApp (User Chat)" as WA
Public -> Public: view templates
Public -> Public: open demo (iframe)
Public -> Public: submit order form (store pending_order)
Public -> WA: opens prefilled chat link
A -> AdminApp: view pending orders
A -> WA: confirm payment in chat
A -> AdminApp: mark order as paid -> DB
AdminApp -> DB: update domains.status = in_use
AdminApp -> DB: create sale record and compute affiliate commission
AdminApp -> Public: send email (PHPMailer)
F -> AffApp: login, view earnings, request withdrawal
AffApp -> DB: create withdrawal request
@enduml
```

**Domain inventory sequence (short)**

```plantuml
@startuml
participant Admin
participant DB
Admin -> DB: add domain (domain_name, template_id)
Admin -> DB: mark domain available
User -> Public: view template -> available domains listed
User -> Public: choose domain -> pending_order saved
Admin -> DB: mark domain sold (in_use) when payment confirmed
Admin -> DB: attach customer details to domain
@enduml
```

---

## Implementation (step-by-step, non-code tasks + SQL DDL)

### Phase 0 — Preparation (1 day)

* Register project domain for portfolio and secure hosting (cPanel). Enable HTTPS.
* Create repo and folder structure (public/, admin/, affiliate/, includes/, assets/).
* Prepare design system using Bootstrap 5 + simple color palette and fonts.

### Phase 1 — Database & Core Models (1 day)

* Create MySQL database and the following tables (core SQL DDL below). Use `utf8mb4` and `InnoDB`.

```sql
-- core tables (abridged)
CREATE TABLE users (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(255) NOT NULL,
  email VARCHAR(255) NOT NULL UNIQUE,
  phone VARCHAR(30),
  password_hash VARCHAR(255),
  role ENUM('admin','affiliate') NOT NULL,
  bank_details TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE templates (
  id INT AUTO_INCREMENT PRIMARY KEY,
  name VARCHAR(255), slug VARCHAR(255) UNIQUE,
  price DECIMAL(10,2), category VARCHAR(100), demo_url VARCHAR(255),
  video_links TEXT, active TINYINT(1) DEFAULT 1
);

CREATE TABLE domains (
  id INT AUTO_INCREMENT PRIMARY KEY,
  template_id INT NOT NULL,
  domain_name VARCHAR(255) UNIQUE,
  status ENUM('available','in_use','suspended') DEFAULT 'available',
  assigned_customer_id INT NULL,
  notes TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  FOREIGN KEY (template_id) REFERENCES templates(id) ON DELETE CASCADE
);

CREATE TABLE pending_orders (
  id INT AUTO_INCREMENT PRIMARY KEY,
  template_id INT, chosen_domain_id INT NULL,
  name VARCHAR(255), email VARCHAR(255), phone VARCHAR(50),
  custom_fields JSON, affiliate_code VARCHAR(100), session_id VARCHAR(128),
  message_text TEXT, status ENUM('pending','paid','cancelled') DEFAULT 'pending',
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE sales (
  id INT AUTO_INCREMENT PRIMARY KEY,
  pending_order_id INT NOT NULL, admin_id INT, amount_paid DECIMAL(10,2),
  commission_amount DECIMAL(10,2), payment_method VARCHAR(100), payment_confirmed_at TIMESTAMP,
  FOREIGN KEY (pending_order_id) REFERENCES pending_orders(id)
);

CREATE TABLE affiliates (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user_id INT NOT NULL, code VARCHAR(100) UNIQUE,
  total_clicks INT DEFAULT 0, total_sales INT DEFAULT 0,
  commission_earned DECIMAL(12,2) DEFAULT 0, commission_pending DECIMAL(12,2) DEFAULT 0,
  commission_paid DECIMAL(12,2) DEFAULT 0, status ENUM('active','inactive') DEFAULT 'active',
  FOREIGN KEY (user_id) REFERENCES users(id)
);

CREATE TABLE withdrawal_requests (
  id INT AUTO_INCREMENT PRIMARY KEY,
  affiliate_id INT, amount DECIMAL(12,2), bank_details JSON, status ENUM('pending','approved','rejected','paid') DEFAULT 'pending',
  requested_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, processed_at TIMESTAMP NULL
);

CREATE TABLE activity_logs (
  id INT AUTO_INCREMENT PRIMARY KEY,
  user_id INT NULL, action VARCHAR(255), details JSON, ip VARCHAR(45), created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
```

> Note: Keep a `settings` single-row table for business variables (commission_rate, maintenance_fee, whatsapp_number, affiliate_cookie_days).

### Phase 2 — Public UI & Order Flow (2–3 days)

* Build template listing (index.php) and template detail page with an iframe demo modal.
* Implement order form that:

  * Reads available domains for that template (`SELECT * FROM domains WHERE template_id = ? AND status='available'`).
  * If no domains available, hide the domain select element.
  * On form submit: save a `pending_order` row, generate a prefilled WhatsApp link, and redirect the user to that link.
  * Store affiliate code (from URL `?aff=CODE`) to session and set cookie (e.g., 30 days) so the code persists across pages.

### Phase 3 — Admin App (3 days)

* Admin login + secure session handling.
* Templates CRUD (add/edit demo url, price, video links).
* Domains inventory: Add domain → assign template (optional fields: notes, hosting login, admin credentials template), mark as `available` or `in_use`.
* Pending orders list with quick actions: View, add payment proof note, Mark `paid`, Assign domain (if not pre-selected), Fill in admin credentials for client, Send email (PHPMailer), Add internal notes.
* Affiliates management: create affiliate, set code, view earnings, click stats, handle withdrawal requests.

### Phase 4 — Affiliate App (1–2 days)

* Simple login and dashboard showing: code, referral link, total sales, commission pending, request withdrawal.
* Withdrawal request form that captures bank name, account number, account name.
* Admin approves/rejects requests and records processing.

### Phase 5 — Reports, Exports, and Testing (1 day)

* Export CSVs for sales, domains inventory, affiliates.
* Security audit checklist: input sanitation, password hashes, session timeouts, HTTPS.
* Test end-to-end flow manually (create order, place WhatsApp message, mark paid, assign domain, email customer).

---

## Milestones (tracking)

1. Project setup + DB (Day 1)
2. Public UI + iframe demos + order form (Day 2–3)
3. Admin inventory and pending orders (Day 4–6)
4. Affiliate dashboard + payouts (Day 7–8)
5. Testing, CSV exports, and documentation handoff (Day 9)

---

## Gathering Results (how to evaluate)

* **Functional tests**: 20 test orders covering: with affiliate code, without code, domain selected, domain not selected.
* **Admin tasks**: mark domain sold, assign credentials, send email — all should be verifiable in DB logs.
* **Affiliate flows**: clicks (if implemented), sale records correctly increase affiliate commission_pending.
* **Performance**: page load under 1s for public listing (use caching for templates list).
* **Security**: pass OWASP top 10 checklist basics for input handling and auth.

---

## Deliverables I will prepare for you (next step)

1. Full PRD (concise user stories + acceptance criteria) — ready for handoff to developers.
2. Full SQL DDL (ready to paste into phpMyAdmin) with indexes and constraints.
3. Admin & public page wireframes (Bootstrap-based HTML mockups).
4. PHP file-level architecture (list of files & example function signatures to implement, not full code).
5. QA checklist and Test cases (detailed).
6. Deployment checklist for cPanel (environment variables, SMTP, cron jobs if needed).

---

If this SPEC looks good, I will generate the PRD, the full SQL DDL, and the wireframe pages next. If you want adjustments to commission rules, cookie lifetime, or domain lifecycle (e.g., auto-suspend after X unpaid days), tell me now and I will incorporate them into the next deliverables.

## Need Professional Help in Developing Your Architecture?

If you want implementation support (I can provide the plain-PHP starter repo, templates integration, and Paystack hooks later), tell me and I will add an implementation bundle.

---

*End of SPEC-1*

---

# Deliverable A — PRODUCT REQUIREMENTS DOCUMENT (PRD)

## Title

Website Template Marketplace — MVP (PHP + MySQL + WhatsApp ordering)

## Objective

Provide a fast-converting portfolio site that lets customers preview templates, place orders via a short form that opens a WhatsApp conversation with prefilled details, and lets admins manage domain inventory and affiliates. Customers pay via WhatsApp conversation (manual) and admins complete provisioning and send credentials by email.

## Key metrics (success criteria)

* Time from click-to-order (form → WhatsApp) <= 30s.
* Admin can mark domain sold and send credentials within 15 minutes after payment confirmation.
* Affiliate commissions tracked correctly for 100% of orders that include an affiliate code in session/cookie.

## Users & Roles

* Public Visitor (browses templates, previews demos, orders via WhatsApp)
* Admin (manages templates, domains, pending orders, affiliates, and payouts)
* Affiliate (admin-created account that views earnings and requests withdrawals)

## User stories & acceptance criteria

### US-01 — Browse templates

* As a Public Visitor I want to see available templates with thumbnails and prices so I can choose one.
* Acceptance: Homepage shows template cards; each card must have View Demo and Get This Website buttons.

### US-02 — Demo preview (iframe)

* As a Visitor I want to open a demo inside the site in an iframe overlay so I can try the template without leaving the page.
* Acceptance: Demo opens in a full-width modal iframe; Back / Close closes the overlay; admin-url buttons load admin demo inside the same iframe.

### US-03 — Order form that opens WhatsApp

* As a Visitor I want to fill a minimal form and open WhatsApp with my details prefilled to start payment chat.
* Acceptance: Form stores pending_order in DB, keeps affiliate code (if present) in session/cookie, builds a wa.me link with encoded message, and redirects user to WhatsApp on submit.

### US-04 — Affiliate persistence

* As a Visitor referred by an affiliate link I want the affiliate code to persist if I navigate so my purchase credits that affiliate.
* Acceptance: If URL contains `?aff=CODE`, store in session and set cookie for 30 days; all pending_order records should store affiliate_code when present.

### US-05 — Domain inventory & admin sale process

* As an Admin I want to add domains, assign them to templates, and mark them sold (attach customer details) so inventory stays accurate.
* Acceptance: Admin can CRUD domains; when marking sold, admin can attach customer details and notes; domain status changes to `in_use` and is no longer visible in public available list.

### US-06 — Affiliate dashboard & withdrawals

* As an Affiliate I want to login, see my earnings, and request withdrawals.
* Acceptance: Affiliate can login, see total sales/commissions/pending, and submit a withdrawal request with bank details. Admin can approve/reject.

### US-07 — Reporting & export

* As an Admin I want CSV exports of sales, domains, and affiliates.
* Acceptance: Admin can export filtered CSV files for date range.

## Non-functional requirements

* Tech: PHP 7.4+, MySQL 5.7+, cPanel hosting, Bootstrap 5 for UI.
* Security: HTTPS required, password_hash for affiliates, sanitized DB queries, session protection.
* Performance: Template list page must cache results for 60s; images optimized WebP if possible.

---

# Deliverable B — BOOTSTRAP HTML WIREFRAMES (EXAMPLES)

> The wireframes below are Bootstrap-based HTML skeletons. Put them under `public/` and `admin/` folders. These are templates (no backend logic) to drop PHP loops/echoes into.

## 1) `public/index.php` — Templates grid (skeleton)

```html
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Templates - Agency</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
<nav class="navbar navbar-light bg-light">
  <div class="container"> <a class="navbar-brand" href="#">Your Agency</a> </div>
</nav>
<main class="container py-4">
  <div class="row g-3">
    <!-- Loop templates -->
    <div class="col-md-4">
      <div class="card h-100">
        <img src="assets/images/thumb1.jpg" class="card-img-top" alt="">
        <div class="card-body d-flex flex-column">
          <h5 class="card-title">Modern Store</h5>
          <p class="card-text">₦200,000</p>
          <div class="mt-auto">
            <button class="btn btn-outline-primary btn-sm" data-demo-url="https://demo.example.com">View Demo</button>
            <a href="buy.php?template=1" class="btn btn-primary btn-sm">Get This Website</a>
          </div>
        </div>
      </div>
    </div>
    <!-- /Loop -->
  </div>
</main>

<!-- Demo iframe modal -->
<div class="modal fade" id="demoModal" tabindex="-1">
  <div class="modal-dialog modal-fullscreen">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Live Demo</h5>
        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
      </div>
      <div class="modal-body p-0">
        <iframe id="demoFrame" src="" style="width:100%;height:80vh;border:0;"></iframe>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
  document.querySelectorAll('[data-demo-url]').forEach(btn=>{
    btn.addEventListener('click', e=>{
      const url = e.currentTarget.getAttribute('data-demo-url');
      document.getElementById('demoFrame').src = url;
      const modal = new bootstrap.Modal(document.getElementById('demoModal'));
      modal.show();
    });
  });
</script>
</body>
</html>
```

## 2) `public/buy.php` — Minimal order form

```html
<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Order</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
<div class="container py-4">
  <h3>Order: Modern Store</h3>
  <form id="orderForm" method="POST" action="/public/submit_order.php">
    <input type="hidden" name="template_id" value="1">
    <div class="mb-3">
      <label class="form-label">Full name</label>
      <input type="text" name="name" class="form-control" required>
    </div>
    <div class="mb-3">
      <label class="form-label">Email</label>
      <input type="email" name="email" class="form-control" required>
    </div>
    <div class="mb-3">
      <label class="form-label">WhatsApp number</label>
      <input type="text" name="phone" class="form-control" required>
    </div>
    <!-- Domain select: show only if available -->
    <div class="mb-3" id="domainSelect">
      <label class="form-label">Choose your domain</label>
      <select name="domain_id" class="form-select">
        <option value="">Select a domain</option>
      </select>
    </div>
    <button type="submit" class="btn btn-success">Start WhatsApp chat</button>
  </form>
</div>
<script>
  // submit_order.php will create pending_order and return encoded wa.me link to redirect to
  document.getElementById('orderForm').addEventListener('submit', async function(e){
    e.preventDefault();
    const form = new FormData(this);
    const res = await fetch('/public/submit_order.php', {method:'POST', body:form});
    const data = await res.json();
    if(data.status === 'ok' && data.wa_link){
      window.location.href = data.wa_link;
    } else {
      alert('Could not create order');
    }
  });
</script>
</body>
</html>
```

## 3) `admin/dashboard.php` — Admin quick view

```html
<!doctype html>
<html>
<head>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
</head>
<body>
<div class="container py-4">
  <h3>Admin Dashboard</h3>
  <div class="row">
    <div class="col-md-4">
      <div class="card p-3">Available Domains<br><strong>5</strong></div>
    </div>
    <div class="col-md-4">
      <div class="card p-3">Pending Orders<br><strong>2</strong></div>
    </div>
    <div class="col-md-4">
      <div class="card p-3">Affiliate Balance<br><strong>₦450,000</strong></div>
    </div>
  </div>

  <h5 class="mt-4">Pending Orders</h5>
  <table class="table table-sm">
    <thead><tr><th>#</th><th>Name</th><th>Template</th><th>Domain</th><th>Actions</th></tr></thead>
    <tbody>
      <!-- loop orders -->
      <tr>
        <td>1</td>
        <td>John Doe</td>
        <td>Modern Store</td>
        <td>luxebiz.com</td>
        <td>
          <a href="order_view.php?id=1" class="btn btn-sm btn-primary">View</a>
          <button class="btn btn-sm btn-success">Mark Paid</button>
        </td>
      </tr>
    </tbody>
  </table>
</div>
</body>
</html>
```

---

# Deliverable C — FILE-LEVEL ARCHITECTURE & FUNCTION SIGNATURES

> Place these files under your project root. Keep `includes/` for shared code.

```
/project-root
├─ public/
│  ├─ index.php               # template list (uses includes/header.php)
│  ├─ template.php            # template detail + Get This Website link
│  ├─ buy.php                 # order form
│  ├─ submit_order.php        # receives form, creates pending_order, returns wa.me link (JSON)
│  ├─ assets/                 # css/js/images
│  └─ webhook/                # future: payment webhooks

├─ admin/
│  ├─ login.php
│  ├─ dashboard.php
│  ├─ templates.php           # CRUD templates
│  ├─ domains.php             # manage domains inventory
│  ├─ orders.php              # pending/completed order list
│  ├─ order_view.php         # view single pending_order, mark paid, assign domain
│  ├─ affiliates.php         # create/manage affiliates
│  └─ withdrawals.php        # view/approve withdrawal requests

├─ affiliate/
│  ├─ login.php
│  └─ dashboard.php

├─ includes/
│  ├─ config.php             # DB credentials, site settings
│  ├─ db.php                 # mysqli connection helper
│  ├─ auth.php               # admin/affiliate session helpers
│  ├─ functions.php          # getTemplates(), getAvailableDomains(template_id), createPendingOrder(...)
│  └─ mailer.php             # PHPMailer wrapper

├─ sql/                      # store SQL DDL files
├─ README.md
```

## Important function signatures (PHP)

```php
// includes/db.php
function db_connect(): mysqli

// includes/functions.php
function getTemplates(bool $activeOnly = true): array
function getTemplateById(int $id): ?array
function getAvailableDomains(int $template_id): array
function createPendingOrder(array $payload): int // returns pending_order_id
function markOrderPaid(int $pending_order_id, array $paymentInfo, int $admin_id): bool
function assignDomainToCustomer(int $domain_id, int $customer_id, array $notes): bool

// includes/auth.php
function admin_require_login(): void
function affiliate_require_login(): void

// public/submit_order.php (entry)
// expects POST: template_id,name,email,phone,domain_id (optional),custom_fields
// returns JSON: {status:'ok', wa_link:'https://wa.me/...'}

```

## Notes for implementers

* Use prepared statements with parameter binding (mysqli or PDO) everywhere.
* All external config (DB creds, whatsapp number, commission rate) must live in `includes/config.php` — do not hardcode.
* Use `password_hash()` / `password_verify()` for affiliate passwords.
* When building `submit_order.php`, encode message text with `rawurlencode()` when building wa.me link.

---
